{
  "address": "0x5dD8905AEC612529361A35372EFD5b127BB182b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quartz",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_start",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_duration",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_gracePeriod",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clawback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quartz",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7c4d309019a49cbbaf19aceeef71bc53b024ff40c6a309b04143f8ef6b9629c",
  "receipt": {
    "to": null,
    "from": "0x8012C113747a7263C98046f61295fb5eBe0b050A",
    "contractAddress": "0x5dD8905AEC612529361A35372EFD5b127BB182b3",
    "transactionIndex": 69,
    "gasUsed": "1491244",
    "logsBloom": "0x
    "blockHash": "0xe636da88cc83c2c92add9f828cc605395501157d7ee8f00419fee4342efe7503",
    "transactionHash": "0xa7c4d309019a49cbbaf19aceeef71bc53b024ff40c6a309b04143f8ef6b9629c",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 13538341,
        "transactionHash": "0xa7c4d309019a49cbbaf19aceeef71bc53b024ff40c6a309b04143f8ef6b9629c",
        "address": "0x5dD8905AEC612529361A35372EFD5b127BB182b3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008012c113747a7263c98046f61295fb5ebe0b050a"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0xe636da88cc83c2c92add9f828cc605395501157d7ee8f00419fee4342efe7503"
      }
    ],
    "blockNumber": 13538341,
    "cumulativeGasUsed": "4837217",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbA8A621b4a54e61C442F5Ec623687e2a942225ef",
    "1636200000",
    "7776000",
    "15552000"
  ],
  "solcInputHash": "1420032115f1cce33bfe4192c8395c65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quartz\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gracePeriod\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quartz\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_duration\":\"time (in seconds) it takes for vesting to allow full withdrawals\",\"_gracePeriod\":\"time (in seconds) after the original duration until admin clawback actions are enabled\",\"_quartz\":\"the address of the QUARTZ token contract\",\"_start\":\"timestamp at which withdrawals are enabled\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of QUARTZ to lock\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFor(address)\":{\"params\":{\"_beneficiary\":\"Beneficiary account to withdraw from\"}},\"withdrawable(address)\":{\"params\":{\"_beneficiary\":\"Beneficiary account\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clawback()\":{\"notice\":\"Once grace period is over, allows owner to retrieve back any remaining quartz and selfdestruct the contract\"},\"deposit(uint256)\":{\"notice\":\"Locks QUARTZ into the contract, in exchange for an equal amount of freshly minted vestedQUARTZCan only be called before the specified start date\"},\"withdraw()\":{\"notice\":\"Burns vestedQUARTZ from the sender's balance, and transfers him an equal amount of QUARTZCan only be called after the specified start dateAmount to transfer is given the sender's current vestedQUARTZ balance, and restricted by vesting rulesWithdrawing blocks future outgoing transfers from this account\"},\"withdrawFor(address)\":{\"notice\":\"Burns vestedQUARTZ from a given beneficiary's balance, and transfers him an equal amount of QUARTZCan only be called after the specified start dateAmount to transfer is given the beneficiary's current vestedQUARTZ balance, and restricted by vesting rulesCan only be called by the owner, to force rewards to be redeemed if necessaryWithdrawing blocks future outgoing transfers from this account\"},\"withdrawable(address)\":{\"notice\":\"Calculates how much vestedQUARTZ can be currently redeemed by a beneficiaryIf start date hasn't been reached yet, or if beneficiary is a contract, withdrawable amount is always 0.\"}},\"notice\":\"A contract that locks QUARTZ in exchange for freshly minted vestedQUARTZ Meant to be used to give away rewards that then get subject to vesting rules.A start date and a duration are specified on deploy. Before the start date, QUARTZ may be sent to the contract, to mint vestedQUARTZ. Once `start` is reached, no deposits are allowed (to prevent mistakes), and withdrawals are now enabled. Withdrawal limits increase linearly during `duration`, so that after the final end date, holders of vestedQUARTZ are able to exchange 100% of it for QUARTZ.In order to prevent users from circumventing the vesting logic, we block outgoing transfer for any account that has redeemed vestedQUARTZ. This prevents redeemers from redeeming in the middle of the period, then sending remaining tokens to a separate wallet, where they'd be able to redeem an extra share again (effectively being able to redeem 75% when only 50% would be allowed)Quartz can only be redeemed by user-accounts, not contracts. This is implemented to prevent staking contracts and other Dapps from maliciously redeeming user tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestedRewards.sol\":\"VestedRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/VestedRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * A contract that locks QUARTZ in exchange for freshly minted vestedQUARTZ\\n * Meant to be used to give away rewards that then get subject to vesting rules.\\n *\\n * @notice A start date and a duration are specified on deploy. Before the\\n * start date, QUARTZ may be sent to the contract, to mint vestedQUARTZ. Once\\n * `start` is reached, no deposits are allowed (to prevent mistakes), and\\n * withdrawals are now enabled. Withdrawal limits increase linearly during\\n * `duration`, so that after the final end date, holders of vestedQUARTZ are\\n * able to exchange 100% of it for QUARTZ.\\n *\\n * @notice In order to prevent users from circumventing the vesting logic,\\n * we block outgoing transfer for any account that has redeemed vestedQUARTZ.\\n * This prevents redeemers from redeeming in the middle of the period,\\n * then sending remaining tokens to a separate wallet, where they'd be able to\\n * redeem an extra share again (effectively being able to redeem 75% when only\\n * 50% would be allowed)\\n *\\n * @notice Quartz can only be redeemed by user-accounts, not contracts. This is implemented to prevent staking contracts and other Dapps from maliciously redeeming user tokens\\n */\\ncontract VestedRewards is ERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    IERC20 public immutable quartz;\\n    uint64 public immutable start;\\n    uint64 public immutable duration;\\n    uint64 public immutable gracePeriod;\\n\\n    mapping(address => uint256) public withdrawals;\\n\\n    // useful to keep 2 decimal precision when dealing with percentages\\n    uint64 constant MUL = 10000;\\n\\n    // start                  50%                     100%\\n    // G 100\\n    // N 50\\n\\n    /**\\n     * @param _quartz the address of the QUARTZ token contract\\n     * @param _start timestamp at which withdrawals are enabled\\n     * @param _duration time (in seconds) it takes for vesting to allow full withdrawals\\n     * @param _gracePeriod time (in seconds) after the original duration until\\n     * admin clawback actions are enabled\\n     */\\n    constructor(\\n        IERC20 _quartz,\\n        uint64 _start,\\n        uint64 _duration,\\n        uint64 _gracePeriod\\n    ) ERC20(\\\"Sandclock (vested rewards)\\\", \\\"vestedQUARTZ\\\") {\\n        require(_start > block.timestamp, \\\"start date cannot be in the past\\\");\\n        require(_duration > 0, \\\"duration cannot be 0\\\");\\n        require(_gracePeriod > 0, \\\"gracePeriod cannot be 0\\\");\\n\\n        quartz = _quartz;\\n        start = _start;\\n        duration = _duration;\\n        gracePeriod = _gracePeriod;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            withdrawals[sender] == 0,\\n            \\\"outgoing transfers are locked for this account\\\"\\n        );\\n\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * Locks QUARTZ into the contract, in exchange for an equal amount of freshly minted vestedQUARTZ\\n     *\\n     * @notice Can only be called before the specified start date\\n     *\\n     * @param _amount Amount of QUARTZ to lock\\n     */\\n    function deposit(uint256 _amount) external onlyBeforeStart {\\n        quartz.safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        _mint(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * Burns vestedQUARTZ from the sender's balance, and transfers him an\\n     * equal amount of QUARTZ\\n     *\\n     * @notice Can only be called after the specified start date\\n     *\\n     * @notice Amount to transfer is given the sender's current\\n     * vestedQUARTZ balance, and restricted by vesting rules\\n     *\\n     * @notice Withdrawing blocks future outgoing transfers from this account\\n     */\\n    function withdraw() external onlyAfterStart {\\n        _withdraw(_msgSender());\\n    }\\n\\n    /**\\n     * Burns vestedQUARTZ from a given beneficiary's balance, and transfers him\\n     * an equal amount of QUARTZ\\n     *\\n     * @notice Can only be called after the specified start date\\n     *\\n     * @notice Amount to transfer is given the beneficiary's current\\n     * vestedQUARTZ balance, and restricted by vesting rules\\n     *\\n     * @notice Can only be called by the owner, to force rewards to be\\n     * redeemed if necessary\\n     *\\n     * @notice Withdrawing blocks future outgoing transfers from this account\\n     *\\n     * @param _beneficiary Beneficiary account to withdraw from\\n     */\\n    function withdrawFor(address _beneficiary)\\n        external\\n        onlyAfterStart\\n        onlyOwner\\n    {\\n        _withdraw(_beneficiary);\\n    }\\n\\n    /**\\n     * Once grace period is over, allows owner to retrieve back any remaining quartz\\n     * and selfdestruct the contract\\n     */\\n    function clawback() external onlyAfterGracePeriod onlyOwner {\\n        uint256 balance = quartz.balanceOf(address(this));\\n        quartz.safeTransfer(_msgSender(), balance);\\n\\n        selfdestruct(payable(_msgSender()));\\n    }\\n\\n    /**\\n     * Calculates how much vestedQUARTZ can be currently redeemed by a beneficiary\\n     *\\n     * @notice If start date hasn't been reached yet, or if beneficiary is a contract, withdrawable amount is always 0.\\n     *\\n     * @param _beneficiary Beneficiary account\\n     */\\n    function withdrawable(address _beneficiary) public view returns (uint256) {\\n        if (!_started() || _beneficiary.isContract()) {\\n            return 0;\\n        }\\n\\n        uint256 balance = balanceOf(_beneficiary);\\n        uint256 withdrawn = withdrawals[_beneficiary];\\n\\n        uint256 unlocked = ((balance + withdrawn) * _durationPercent()) / MUL;\\n\\n        if (unlocked <= withdrawn) {\\n            unlocked = 0;\\n        } else {\\n            unchecked {\\n                unlocked -= withdrawn;\\n            }\\n        }\\n\\n        if (unlocked > balance) {\\n            unlocked = balance;\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    /**\\n     * Burns an amount of vestedQUARTZ from beneficiary, and sends him\\n     * a corresponding amount of QUARTZ\\n     *\\n     * @notice Marks the beneficiary as redeemer, which blocks future outgoing\\n     * transfers from him\\n     */\\n    function _withdraw(address _beneficiary) private {\\n        uint256 amount = withdrawable(_beneficiary);\\n        require(amount > 0, \\\"nothing to withdraw\\\");\\n\\n        _burn(_beneficiary, amount);\\n\\n        withdrawals[_beneficiary] += amount;\\n\\n        quartz.safeTransfer(_beneficiary, amount);\\n    }\\n\\n    /**\\n     * Calculates the percentage of the timespan given by `start` and `duration`\\n     *\\n     * @notice Return value is multiplied by `MUL`, so as to keep precision.\\n     * Any calculation from this value must later be divided by `MUL` to\\n     * retrieve the original value\\n     */\\n    function _durationPercent() private view returns (uint64) {\\n        uint64 timestamp = _getBlockTimestamp();\\n\\n        if (timestamp < start) {\\n            return 0;\\n        }\\n\\n        if (timestamp >= _end()) {\\n            return MUL;\\n        }\\n\\n        return ((timestamp - start) * MUL) / duration;\\n    }\\n\\n    function _end() private view returns (uint256) {\\n        return start + duration;\\n    }\\n\\n    function _started() private view returns (bool) {\\n        return start <= _getBlockTimestamp();\\n    }\\n\\n    modifier onlyBeforeStart() {\\n        require(!_started(), \\\"already started\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterStart() {\\n        require(_started(), \\\"not started yet\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterGracePeriod() {\\n        require(\\n            (_end() + gracePeriod) <= block.timestamp,\\n            \\\"grace period not over yet\\\"\\n        );\\n        _;\\n    }\\n\\n    function _getBlockTimestamp() private view returns (uint64) {\\n        return uint64(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x9676a0dee56718dc4fe4d9acc7098d8937b4c322ff20a71356b0e14cede09163\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001ce038038062001ce0833981016040819052620000359162000329565b604080518082018252601a81527f53616e64636c6f636b202876657374656420726577617264732900000000000060208083019182528351808501909452600c84526b3b32b9ba32b228aaa0a92a2d60a11b9084015281519192916200009e9160039162000266565b508051620000b490600490602084019062000266565b505050620000d1620000cb6200021060201b60201c565b62000214565b42836001600160401b0316116200012f5760405162461bcd60e51b815260206004820181905260248201527f737461727420646174652063616e6e6f7420626520696e20746865207061737460448201526064015b60405180910390fd5b6000826001600160401b0316116200018a5760405162461bcd60e51b815260206004820152601460248201527f6475726174696f6e2063616e6e6f742062652030000000000000000000000000604482015260640162000126565b6000816001600160401b031611620001e55760405162461bcd60e51b815260206004820152601760248201527f6772616365506572696f642063616e6e6f742062652030000000000000000000604482015260640162000126565b6001600160a01b039093166080526001600160401b0391821660a052811660c0521660e052620003d0565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002749062000393565b90600052602060002090601f016020900481019282620002985760008555620002e3565b82601f10620002b357805160ff1916838001178555620002e3565b82800160010185558215620002e3579182015b82811115620002e3578251825591602001919060010190620002c6565b50620002f1929150620002f5565b5090565b5b80821115620002f15760008155600101620002f6565b80516001600160401b03811681146200032457600080fd5b919050565b600080600080608085870312156200034057600080fd5b84516001600160a01b03811681146200035857600080fd5b935062000368602086016200030c565b925062000378604086016200030c565b915062000388606086016200030c565b905092959194509250565b600181811c90821680620003a857607f821691505b60208210811415620003ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161188962000457600039600081816102cd01526105310152600081816101a301528181610c2a0152610fab01526000818161032d01528181610c4b01528181610cef01528181610f560152610fd2015260008181610354015281816105fc01528181610685015281816108f50152610dae01526118896000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063b6b55f251161007c578063b6b55f2514610315578063be9a655514610328578063c0d22e941461034f578063ce513b6f14610376578063dd62ed3e14610389578063f2fde38b146103c257600080fd5b80638da5cb5b1461028857806395d89b41146102ad5780639eca672c146102b5578063a06db7dc146102c8578063a457c2d7146102ef578063a9059cbb1461030257600080fd5b8063313ce56711610115578063313ce5671461020d578063395093511461021c5780633ccfd60b1461022f57806370a0823114610237578063715018a6146102605780637a9262a21461026857600080fd5b806306fdde031461015d578063095ea7b31461017b5780630fb5a6b41461019e57806318160ddd146101de57806323b872dd146101f05780632526d96014610203575b600080fd5b6101656103d5565b6040516101729190611536565b60405180910390f35b61018e610189366004611585565b610467565b6040519015158152602001610172565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610172565b6002545b604051908152602001610172565b61018e6101fe3660046115af565b61047d565b61020b61052e565b005b60405160128152602001610172565b61018e61022a366004611585565b6106b7565b61020b6106f3565b6101e26102453660046115eb565b6001600160a01b031660009081526020819052604090205490565b61020b610744565b6101e26102763660046115eb565b60066020526000908152604090205481565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610172565b610165610778565b61020b6102c33660046115eb565b610787565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b61018e6102fd366004611585565b610803565b61018e610310366004611585565b61089c565b61020b610323366004611606565b6108a9565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6101e26103843660046115eb565b61092f565b6101e261039736600461161f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61020b6103d03660046115eb565b6109da565b6060600380546103e490611652565b80601f016020809104026020016040519081016040528092919081815260200182805461041090611652565b801561045d5780601f106104325761010080835404028352916020019161045d565b820191906000526020600020905b81548152906001019060200180831161044057829003601f168201915b5050505050905090565b6000610474338484610a72565b50600192915050565b600061048a848484610b96565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105145760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105218533858403610a72565b60019150505b9392505050565b427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16610562610c23565b61056c91906116a3565b11156105ba5760405162461bcd60e51b815260206004820152601960248201527f677261636520706572696f64206e6f74206f7665722079657400000000000000604482015260640161050b565b6005546001600160a01b031633146105e45760405162461bcd60e51b815260040161050b906116bb565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e91906116f0565b90506106b47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163383610c7e565b33ff5b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104749185906106ee9086906116a3565b610a72565b6106fb610ce1565b6107395760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081cdd185c9d1959081e595d608a1b604482015260640161050b565b61074233610d16565b565b6005546001600160a01b0316331461076e5760405162461bcd60e51b815260040161050b906116bb565b6107426000610dd9565b6060600480546103e490611652565b61078f610ce1565b6107cd5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081cdd185c9d1959081e595d608a1b604482015260640161050b565b6005546001600160a01b031633146107f75760405162461bcd60e51b815260040161050b906116bb565b61080081610d16565b50565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156108855760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161050b565b6108923385858403610a72565b5060019392505050565b6000610474338484610b96565b6108b1610ce1565b156108f05760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cdd185c9d1959608a1b604482015260640161050b565b6109257f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316333084610e2b565b6108003382610e69565b6000610939610ce1565b158061094e57506001600160a01b0382163b15155b1561095b57506000919050565b6001600160a01b038216600090815260208181526040808320546006909252822054909161271061098a610f48565b67ffffffffffffffff1661099e84866116a3565b6109a89190611709565b6109b2919061173e565b90508181116109c3575060006109c7565b8190035b828111156109d25750815b949350505050565b6005546001600160a01b03163314610a045760405162461bcd60e51b815260040161050b906116bb565b6001600160a01b038116610a695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050b565b61080081610dd9565b6001600160a01b038316610ad45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050b565b6001600160a01b038216610b355760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526006602052604090205415610c135760405162461bcd60e51b815260206004820152602e60248201527f6f7574676f696e67207472616e736665727320617265206c6f636b656420666f60448201526d1c881d1a1a5cc81858d8dbdd5b9d60921b606482015260840161050b565b610c1e838383611011565b505050565b6000610c6f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611752565b67ffffffffffffffff16905090565b6040516001600160a01b038316602482015260448101829052610c1e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111df565b67ffffffffffffffff4281167f0000000000000000000000000000000000000000000000000000000000000000909116111590565b6000610d218261092f565b905060008111610d695760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b604482015260640161050b565b610d7382826112b1565b6001600160a01b03821660009081526006602052604081208054839290610d9b9084906116a3565b90915550610dd590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610c7e565b5050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e639085906323b872dd60e01b90608401610caa565b50505050565b6001600160a01b038216610ebf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050b565b8060026000828254610ed191906116a3565b90915550506001600160a01b03821660009081526020819052604081208054839290610efe9084906116a3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60004267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169082161015610f8857600091505090565b610f90610c23565b8167ffffffffffffffff1610610fa95761271091505090565b7f0000000000000000000000000000000000000000000000000000000000000000612710610ff77f00000000000000000000000000000000000000000000000000000000000000008461177e565b61100191906117a7565b61100b91906117d7565b91505090565b6001600160a01b0383166110755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050b565b6001600160a01b0382166110d75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050b565b6001600160a01b0383166000908152602081905260409020548181101561114f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161050b565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906111869084906116a3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111d291815260200190565b60405180910390a3610e63565b6000611234826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113ff9092919063ffffffff16565b805190915015610c1e578080602001905181019061125291906117fe565b610c1e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161050b565b6001600160a01b0382166113115760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161050b565b6001600160a01b038216600090815260208190526040902054818110156113855760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161050b565b6001600160a01b03831660009081526020819052604081208383039055600280548492906113b4908490611820565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606109d2848460008585843b6114585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161050b565b600080866001600160a01b031685876040516114749190611837565b60006040518083038185875af1925050503d80600081146114b1576040519150601f19603f3d011682016040523d82523d6000602084013e6114b6565b606091505b50915091506114c68282866114d1565b979650505050505050565b606083156114e0575081610527565b8251156114f05782518084602001fd5b8160405162461bcd60e51b815260040161050b9190611536565b60005b8381101561152557818101518382015260200161150d565b83811115610e635750506000910152565b602081526000825180602084015261155581604085016020870161150a565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461158057600080fd5b919050565b6000806040838503121561159857600080fd5b6115a183611569565b946020939093013593505050565b6000806000606084860312156115c457600080fd5b6115cd84611569565b92506115db60208501611569565b9150604084013590509250925092565b6000602082840312156115fd57600080fd5b61052782611569565b60006020828403121561161857600080fd5b5035919050565b6000806040838503121561163257600080fd5b61163b83611569565b915061164960208401611569565b90509250929050565b600181811c9082168061166657607f821691505b6020821081141561168757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156116b6576116b661168d565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561170257600080fd5b5051919050565b60008160001904831182151516156117235761172361168d565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261174d5761174d611728565b500490565b600067ffffffffffffffff8083168185168083038211156117755761177561168d565b01949350505050565b600067ffffffffffffffff8381169083168181101561179f5761179f61168d565b039392505050565b600067ffffffffffffffff808316818516818304811182151516156117ce576117ce61168d565b02949350505050565b600067ffffffffffffffff808416806117f2576117f2611728565b92169190910492915050565b60006020828403121561181057600080fd5b8151801515811461052757600080fd5b6000828210156118325761183261168d565b500390565b6000825161184981846020870161150a565b919091019291505056fea264697066735822122027b562a8b612d8c23cf6ba53822853e4a2cbe189530fb2f6f5d732c8691559e564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063b6b55f251161007c578063b6b55f2514610315578063be9a655514610328578063c0d22e941461034f578063ce513b6f14610376578063dd62ed3e14610389578063f2fde38b146103c257600080fd5b80638da5cb5b1461028857806395d89b41146102ad5780639eca672c146102b5578063a06db7dc146102c8578063a457c2d7146102ef578063a9059cbb1461030257600080fd5b8063313ce56711610115578063313ce5671461020d578063395093511461021c5780633ccfd60b1461022f57806370a0823114610237578063715018a6146102605780637a9262a21461026857600080fd5b806306fdde031461015d578063095ea7b31461017b5780630fb5a6b41461019e57806318160ddd146101de57806323b872dd146101f05780632526d96014610203575b600080fd5b6101656103d5565b6040516101729190611536565b60405180910390f35b61018e610189366004611585565b610467565b6040519015158152602001610172565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610172565b6002545b604051908152602001610172565b61018e6101fe3660046115af565b61047d565b61020b61052e565b005b60405160128152602001610172565b61018e61022a366004611585565b6106b7565b61020b6106f3565b6101e26102453660046115eb565b6001600160a01b031660009081526020819052604090205490565b61020b610744565b6101e26102763660046115eb565b60066020526000908152604090205481565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610172565b610165610778565b61020b6102c33660046115eb565b610787565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b61018e6102fd366004611585565b610803565b61018e610310366004611585565b61089c565b61020b610323366004611606565b6108a9565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6101e26103843660046115eb565b61092f565b6101e261039736600461161f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61020b6103d03660046115eb565b6109da565b6060600380546103e490611652565b80601f016020809104026020016040519081016040528092919081815260200182805461041090611652565b801561045d5780601f106104325761010080835404028352916020019161045d565b820191906000526020600020905b81548152906001019060200180831161044057829003601f168201915b5050505050905090565b6000610474338484610a72565b50600192915050565b600061048a848484610b96565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105145760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6105218533858403610a72565b60019150505b9392505050565b427f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16610562610c23565b61056c91906116a3565b11156105ba5760405162461bcd60e51b815260206004820152601960248201527f677261636520706572696f64206e6f74206f7665722079657400000000000000604482015260640161050b565b6005546001600160a01b031633146105e45760405162461bcd60e51b815260040161050b906116bb565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561064657600080fd5b505afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e91906116f0565b90506106b47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163383610c7e565b33ff5b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104749185906106ee9086906116a3565b610a72565b6106fb610ce1565b6107395760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081cdd185c9d1959081e595d608a1b604482015260640161050b565b61074233610d16565b565b6005546001600160a01b0316331461076e5760405162461bcd60e51b815260040161050b906116bb565b6107426000610dd9565b6060600480546103e490611652565b61078f610ce1565b6107cd5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081cdd185c9d1959081e595d608a1b604482015260640161050b565b6005546001600160a01b031633146107f75760405162461bcd60e51b815260040161050b906116bb565b61080081610d16565b50565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156108855760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161050b565b6108923385858403610a72565b5060019392505050565b6000610474338484610b96565b6108b1610ce1565b156108f05760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cdd185c9d1959608a1b604482015260640161050b565b6109257f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316333084610e2b565b6108003382610e69565b6000610939610ce1565b158061094e57506001600160a01b0382163b15155b1561095b57506000919050565b6001600160a01b038216600090815260208181526040808320546006909252822054909161271061098a610f48565b67ffffffffffffffff1661099e84866116a3565b6109a89190611709565b6109b2919061173e565b90508181116109c3575060006109c7565b8190035b828111156109d25750815b949350505050565b6005546001600160a01b03163314610a045760405162461bcd60e51b815260040161050b906116bb565b6001600160a01b038116610a695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050b565b61080081610dd9565b6001600160a01b038316610ad45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050b565b6001600160a01b038216610b355760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831660009081526006602052604090205415610c135760405162461bcd60e51b815260206004820152602e60248201527f6f7574676f696e67207472616e736665727320617265206c6f636b656420666f60448201526d1c881d1a1a5cc81858d8dbdd5b9d60921b606482015260840161050b565b610c1e838383611011565b505050565b6000610c6f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611752565b67ffffffffffffffff16905090565b6040516001600160a01b038316602482015260448101829052610c1e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111df565b67ffffffffffffffff4281167f0000000000000000000000000000000000000000000000000000000000000000909116111590565b6000610d218261092f565b905060008111610d695760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b604482015260640161050b565b610d7382826112b1565b6001600160a01b03821660009081526006602052604081208054839290610d9b9084906116a3565b90915550610dd590506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610c7e565b5050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e639085906323b872dd60e01b90608401610caa565b50505050565b6001600160a01b038216610ebf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050b565b8060026000828254610ed191906116a3565b90915550506001600160a01b03821660009081526020819052604081208054839290610efe9084906116a3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60004267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169082161015610f8857600091505090565b610f90610c23565b8167ffffffffffffffff1610610fa95761271091505090565b7f0000000000000000000000000000000000000000000000000000000000000000612710610ff77f00000000000000000000000000000000000000000000000000000000000000008461177e565b61100191906117a7565b61100b91906117d7565b91505090565b6001600160a01b0383166110755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050b565b6001600160a01b0382166110d75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050b565b6001600160a01b0383166000908152602081905260409020548181101561114f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161050b565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906111869084906116a3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111d291815260200190565b60405180910390a3610e63565b6000611234826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113ff9092919063ffffffff16565b805190915015610c1e578080602001905181019061125291906117fe565b610c1e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161050b565b6001600160a01b0382166113115760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161050b565b6001600160a01b038216600090815260208190526040902054818110156113855760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161050b565b6001600160a01b03831660009081526020819052604081208383039055600280548492906113b4908490611820565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60606109d2848460008585843b6114585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161050b565b600080866001600160a01b031685876040516114749190611837565b60006040518083038185875af1925050503d80600081146114b1576040519150601f19603f3d011682016040523d82523d6000602084013e6114b6565b606091505b50915091506114c68282866114d1565b979650505050505050565b606083156114e0575081610527565b8251156114f05782518084602001fd5b8160405162461bcd60e51b815260040161050b9190611536565b60005b8381101561152557818101518382015260200161150d565b83811115610e635750506000910152565b602081526000825180602084015261155581604085016020870161150a565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461158057600080fd5b919050565b6000806040838503121561159857600080fd5b6115a183611569565b946020939093013593505050565b6000806000606084860312156115c457600080fd5b6115cd84611569565b92506115db60208501611569565b9150604084013590509250925092565b6000602082840312156115fd57600080fd5b61052782611569565b60006020828403121561161857600080fd5b5035919050565b6000806040838503121561163257600080fd5b61163b83611569565b915061164960208401611569565b90509250929050565b600181811c9082168061166657607f821691505b6020821081141561168757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156116b6576116b661168d565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561170257600080fd5b5051919050565b60008160001904831182151516156117235761172361168d565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261174d5761174d611728565b500490565b600067ffffffffffffffff8083168185168083038211156117755761177561168d565b01949350505050565b600067ffffffffffffffff8381169083168181101561179f5761179f61168d565b039392505050565b600067ffffffffffffffff808316818516818304811182151516156117ce576117ce61168d565b02949350505050565b600067ffffffffffffffff808416806117f2576117f2611728565b92169190910492915050565b60006020828403121561181057600080fd5b8151801515811461052757600080fd5b6000828210156118325761183261168d565b500390565b6000825161184981846020870161150a565b919091019291505056fea264697066735822122027b562a8b612d8c23cf6ba53822853e4a2cbe189530fb2f6f5d732c8691559e564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_duration": "time (in seconds) it takes for vesting to allow full withdrawals",
          "_gracePeriod": "time (in seconds) after the original duration until admin clawback actions are enabled",
          "_quartz": "the address of the QUARTZ token contract",
          "_start": "timestamp at which withdrawals are enabled"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of QUARTZ to lock"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFor(address)": {
        "params": {
          "_beneficiary": "Beneficiary account to withdraw from"
        }
      },
      "withdrawable(address)": {
        "params": {
          "_beneficiary": "Beneficiary account"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clawback()": {
        "notice": "Once grace period is over, allows owner to retrieve back any remaining quartz and selfdestruct the contract"
      },
      "deposit(uint256)": {
        "notice": "Locks QUARTZ into the contract, in exchange for an equal amount of freshly minted vestedQUARTZCan only be called before the specified start date"
      },
      "withdraw()": {
        "notice": "Burns vestedQUARTZ from the sender's balance, and transfers him an equal amount of QUARTZCan only be called after the specified start dateAmount to transfer is given the sender's current vestedQUARTZ balance, and restricted by vesting rulesWithdrawing blocks future outgoing transfers from this account"
      },
      "withdrawFor(address)": {
        "notice": "Burns vestedQUARTZ from a given beneficiary's balance, and transfers him an equal amount of QUARTZCan only be called after the specified start dateAmount to transfer is given the beneficiary's current vestedQUARTZ balance, and restricted by vesting rulesCan only be called by the owner, to force rewards to be redeemed if necessaryWithdrawing blocks future outgoing transfers from this account"
      },
      "withdrawable(address)": {
        "notice": "Calculates how much vestedQUARTZ can be currently redeemed by a beneficiaryIf start date hasn't been reached yet, or if beneficiary is a contract, withdrawable amount is always 0."
      }
    },
    "notice": "A contract that locks QUARTZ in exchange for freshly minted vestedQUARTZ Meant to be used to give away rewards that then get subject to vesting rules.A start date and a duration are specified on deploy. Before the start date, QUARTZ may be sent to the contract, to mint vestedQUARTZ. Once `start` is reached, no deposits are allowed (to prevent mistakes), and withdrawals are now enabled. Withdrawal limits increase linearly during `duration`, so that after the final end date, holders of vestedQUARTZ are able to exchange 100% of it for QUARTZ.In order to prevent users from circumventing the vesting logic, we block outgoing transfer for any account that has redeemed vestedQUARTZ. This prevents redeemers from redeeming in the middle of the period, then sending remaining tokens to a separate wallet, where they'd be able to redeem an extra share again (effectively being able to redeem 75% when only 50% would be allowed)Quartz can only be redeemed by user-accounts, not contracts. This is implemented to prevent staking contracts and other Dapps from maliciously redeeming user tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 883,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 889,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 891,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 893,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 895,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2169,
        "contract": "contracts/VestedRewards.sol:VestedRewards",
        "label": "withdrawals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}