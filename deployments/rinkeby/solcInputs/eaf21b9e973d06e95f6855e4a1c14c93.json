{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IChildToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n/**\n * ChildToken interface for PoS bridge\n */\ninterface IChildToken {\n    function deposit(address user, bytes calldata depositData) external;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/Quartz.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./interfaces/IQuartzGovernor.sol\";\nimport \"./interfaces/IQuartz.sol\";\nimport \"./interfaces/IChildToken.sol\";\n\n/**\n * Polygon version of our Quartz token, bridged from Ethereum\n *\n * @notice This token starts out with 0 supply. All minting is done by the\n * bridge's ChildChainManager when a cross-chain transaction is made\n *\n * @notice In addition to ERC20 functionalities, this contract also allows\n * holders to stake tokens, which grants them voting rights on `Governor`, or\n * the ability to delegate that power to another party\n */\ncontract Quartz is\n    ERC20Upgradeable,\n    AccessControlUpgradeable,\n    IQuartz,\n    IChildToken\n{\n    // Emitted when Quartz is staked\n    event Staked(\n        uint64 indexed id,\n        address indexed owner,\n        address indexed beneficiary,\n        uint256 amount,\n        uint64 maturationTime\n    );\n\n    // Emitted when Quartz is unstaked\n    event Unstaked(\n        uint64 indexed id,\n        address indexed owner,\n        address indexed beneficiary,\n        uint256 amount\n    );\n\n    // Emitted when the delegatee of an account is changed\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    // Emitted when voting power for an account is changed\n    event DelegateVotesChanged(address indexed delegate, uint256 newBalance);\n\n    // Emitted when the governor contract is changed\n    event GovernorChanged(address indexed governor);\n\n    // Emitted when the minimum stake period is updated\n    event MinStakePeriodChanged(uint64 minStakePeriod);\n\n    struct StakeInfo {\n        address owner; // Owner who staked tokens\n        address beneficiary; // Beneficiary who received vote rep\n        uint256 amount; // Staked Quartz amount\n        uint64 period; // Stake period in seconds\n        uint64 maturationTimestamp; // Stake maturation timestamp\n        bool active; // Indicates active after maturation time\n    }\n\n    // an update to voting power for an entity\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    // role required by Polygon PoS bridge to mint tokens when a cross-chain transaction happens\n    // https://docs.polygon.technology/docs/develop/ethereum-polygon/pos/mapping-assets/\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\n\n    // governor contract instance\n    IQuartzGovernor public governor;\n\n    // total amount staked by an account, which corresponds to his total voting power\n    // (including delegated power)\n    mapping(address => uint256) public userVotesRep;\n\n    // delegates for each account\n    mapping(address => address) public delegates;\n\n    // all checkpoints for all accounts\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    // checkpoint counters for all accounts\n    mapping(address => uint32) public numCheckpoints;\n\n    // minimum period before tokens can be unstaked\n    uint64 public minStakePeriod;\n\n    // stakes counter\n    uint64 public stakeLength;\n\n    // All stakes infos\n    mapping(uint64 => StakeInfo) public stakes;\n\n    // Total staked amount\n    uint256 public override totalStaked;\n\n    /**\n     * @param _minStakePeriod the initial minStakePeriod to set\n     * @param _childChainManager ChildChainManager instance for Polygon PoS bridge\n     */\n    function initialize(uint64 _minStakePeriod, address _childChainManager)\n        external\n        initializer\n    {\n        minStakePeriod = _minStakePeriod;\n        emit MinStakePeriodChanged(_minStakePeriod);\n\n        require(\n            _childChainManager != address(0),\n            \"QUARTZ: Child chain manager cannot be zero\"\n        );\n\n        __ERC20_init(\"Sandclock\", \"QUARTZ\");\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(DEPOSITOR_ROLE, _childChainManager);\n    }\n\n    //\n    // Public API\n    //\n\n    /**\n     * Sets the governor contract\n     *\n     * @notice Can only be called by a contract admin\n     *\n     * @notice Can only be called once\n     *\n     * @param _governor new Governor instance to use\n     */\n    function setGovernor(IQuartzGovernor _governor)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            address(_governor) != address(0),\n            \"QUARTZ: Governor cannot be zero\"\n        );\n        require(\n            address(governor) == address(0),\n            \"QUARTZ: Governor already set\"\n        );\n        governor = _governor;\n        emit GovernorChanged(address(_governor));\n    }\n\n    /**\n     * Stake QUARTZ token to grant vote rep to beneficiary for a period.\n     *\n     * @param _amount Amount of QUARTZ to stake\n     * @param _beneficiary Beneficiary account for this stake\n     * @param _period minimum period before unstaking is possible\n     */\n    function stake(\n        uint256 _amount,\n        address _beneficiary,\n        uint64 _period\n    ) external {\n        require(\n            _beneficiary != address(0),\n            \"QUARTZ: Beneficiary cannot be 0x0\"\n        );\n        require(_amount > 0, \"QUARTZ: Amount must be greater than zero\");\n        require(\n            _period >= minStakePeriod,\n            \"QUARTZ: Period must be greater than minimum\"\n        );\n\n        _transfer(msg.sender, address(this), _amount);\n\n        address _owner = msg.sender;\n        uint64 _stakeId = stakeLength;\n        uint64 _maturationTimestamp = _getBlockTimestamp() + _period;\n        StakeInfo memory stakeInfo =\n            StakeInfo({\n                owner: _owner,\n                beneficiary: _beneficiary,\n                amount: _amount,\n                period: _period,\n                maturationTimestamp: _maturationTimestamp,\n                active: true\n            });\n        stakes[_stakeId] = stakeInfo;\n\n        userVotesRep[_beneficiary] += _amount;\n        if (delegates[_beneficiary] == address(0)) {\n            _delegate(_beneficiary, _beneficiary);\n        } else {\n            _moveDelegates(address(0), delegates[_beneficiary], _amount);\n        }\n\n        stakeLength += 1;\n        totalStaked += _amount;\n        emit Staked(\n            _stakeId,\n            _owner,\n            _beneficiary,\n            _amount,\n            _maturationTimestamp\n        );\n    }\n\n    /**\n     * Unstakes an existing stake\n     *\n     * @param _stakeId ID of the stake to unstake\n     */\n    function unstake(uint64 _stakeId) external {\n        require(_stakeId < stakeLength, \"QUARTZ: Invalid id\");\n        StakeInfo storage stakeInfo = stakes[_stakeId];\n        //slither-disable-next-line timestamp\n        require(\n            stakeInfo.maturationTimestamp <= _getBlockTimestamp(),\n            \"QUARTZ: Not ready to unstake\"\n        );\n        require(stakeInfo.active, \"QUARTZ: Already unstaked\");\n        require(stakeInfo.owner == msg.sender, \"QUARTZ: Not owner\");\n\n        stakeInfo.active = false;\n        userVotesRep[stakeInfo.beneficiary] -= stakeInfo.amount;\n        totalStaked -= stakeInfo.amount;\n\n        _moveDelegates(\n            delegates[stakeInfo.beneficiary],\n            address(0),\n            stakeInfo.amount\n        );\n\n        _transfer(address(this), msg.sender, stakeInfo.amount);\n\n        emit Unstaked(\n            _stakeId,\n            stakeInfo.owner,\n            stakeInfo.beneficiary,\n            stakeInfo.amount\n        );\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     *\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * Locks voting power in the governor contract. Used by the governor\n     * contract when votes are cast, to lock them until the proposal is finished\n     *\n     * @notice Only callable by the governor contract\n     *\n     * @param user User to get votes from\n     * @param amount How many votes to lock\n     */\n    function moveVotesToGovernor(address user, uint256 amount)\n        external\n        override\n    {\n        require(\n            msg.sender == address(governor),\n            \"QUARTZ: only governor can call\"\n        );\n        _moveDelegates(user, msg.sender, amount);\n    }\n\n    /**\n     * Unlocks voting power from the governor contract. Used by the governor\n     * contract when a proposal is finished, and all of its votes are unlocked\n     *\n     * @notice Only callable by the governor contract\n     *\n     * @param user User to get votes from\n     * @param amount How many votes to unlock\n     */\n    function moveVotesFromGovernor(address user, uint256 amount)\n        external\n        override\n    {\n        require(\n            msg.sender == address(governor),\n            \"QUARTZ: only governor can call\"\n        );\n        _moveDelegates(msg.sender, user, amount);\n    }\n\n    /**\n     * Gets the current votes balance for `account`\n     *\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    //\n    // Polygon PoS Bridge API\n    //\n\n    /**\n     * @notice called when token is deposited on root chain\n     *\n     * @dev Should be callable only by ChildChainManager\n     * Should handle deposit by minting the required amount for user\n     * Make sure minting is done only by this function\n     *\n     * @param _user user address for whom deposit is being done\n     * @param _depositData abi encoded amount\n     */\n    function deposit(address _user, bytes calldata _depositData)\n        external\n        override\n        onlyRole(DEPOSITOR_ROLE)\n    {\n        uint256 amount = abi.decode(_depositData, (uint256));\n        _mint(_user, amount);\n    }\n\n    /**\n     * @notice called when user wants to withdraw tokens back to root chain\n     *\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n     *\n     * @param _amount amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external override {\n        _burn(_msgSender(), _amount);\n    }\n\n    //\n    // Private logic\n    //\n\n    /**\n     * Sets a new delegate for an account, overwriting any previously existing delegate\n     *\n     * @param delegator Account to delegate from\n     * @param delegatee Account to delegate to\n     */\n    function _delegate(address delegator, address delegatee) internal {\n        require(delegatee != address(0), \"QUARTZ: delegatee cannot be 0x0\");\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorVotesRep = userVotesRep[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorVotesRep);\n    }\n\n    /**\n     * Moves voting power from an old delegate to a new one\n     *\n     * @notice If no explicit delegate is registered, the account is actually\n     * its own delegate so this function is always used when transfering voting\n     * power\n     *\n     * @notice If not enough voting power exists on srcRep, we try to withdraw\n     * votes from governor's executed or canceled proposals. If we still don't\n     * have enough votes, and if dstRep is 0x0 (meaning we need to destroy\n     * votes), we force governor to withdraw from active proposals as well,\n     * until the target amount is reached\n     *\n     * @param srcRep Account from which to take votes. If 0x0, we're creating new voting power\n     * @param dstRep Account which will receive votes. If 0x0, we're destroying voting power\n     * @param amount Amount of votes to transfer\n     */\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        // if both addresses are the same, or amount == 0, this is ano-op\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // remove voting power from srcRep\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld =\n                    srcRepNum > 0\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\n                        : 0;\n                if (srcRepOld < amount) {\n                    governor.withdrawRequiredVotes(\n                        srcRep,\n                        amount - srcRepOld,\n                        dstRep == address(0)\n                    );\n                    srcRepNum = numCheckpoints[srcRep];\n                    srcRepOld = srcRepNum > 0\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\n                        : 0;\n                }\n                uint256 srcRepNew = srcRepOld - amount;\n                _writeCheckpoint(srcRep, srcRepNum, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // add voting power to dstRep\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld =\n                    dstRepNum > 0\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\n                        : 0;\n                uint256 dstRepNew = dstRepOld + amount;\n                _writeCheckpoint(dstRep, dstRepNum, dstRepNew);\n            }\n        }\n    }\n\n    /**\n     * Writes a new checkpoint with updated voting power info for a given delegatee\n     *\n     * @param delegatee The delegatee account\n     * @param nCheckpoints How many checkpoints already exist for this delegatee\n     * @param newVotes new voting power for this delegatee\n     */\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 newVotes\n    ) internal {\n        uint32 blockNumber =\n            safe32(\n                block.number,\n                \"Quartz::_writeCheckpoint: block number exceeds 32 bits\"\n            );\n        if (\n            //slither-disable-next-line incorrect-equality\n            nCheckpoints > 0 &&\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n        ) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n                blockNumber,\n                newVotes\n            );\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, newVotes);\n    }\n\n    /**\n     * Safely casts uint256 to uint32, reverting if it doesn't fit\n     *\n     * @param n Number to check\n     * @param errorMessage message to throw in case of error\n     * @return the converted uint32\n     */\n    function safe32(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    /**\n     * Updates the minimum period for new stakes\n     *\n     * @notice Only callable by contract admin\n     *\n     * @param _minStakePeriod new minumum period\n     */\n    function setMinStakePeriod(uint64 _minStakePeriod)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        minStakePeriod = _minStakePeriod;\n        emit MinStakePeriodChanged(_minStakePeriod);\n    }\n\n    /**\n     * Returns the current block timestamp as a uint64\n     */\n    function _getBlockTimestamp() private view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/interfaces/IQuartzGovernor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ninterface IQuartzGovernor {\n    function withdrawRequiredVotes(\n        address from,\n        uint256 amount,\n        bool force\n    ) external;\n\n    function getTotalUserVotes(address _voter) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IQuartz.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ninterface IQuartz {\n    function moveVotesToGovernor(address user, uint256 amount) external;\n\n    function moveVotesFromGovernor(address user, uint256 amount) external;\n\n    function getCurrentVotes(address account) external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/QuartzGovernor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./interfaces/IQuartz.sol\";\nimport \"./interfaces/IQuartzGovernor.sol\";\n\ncontract QuartzGovernor is AccessControlUpgradeable, IQuartzGovernor {\n    bytes32 public constant UPDATE_SETTINGS_ROLE =\n        keccak256(\"UPDATE_SETTINGS_ROLE\");\n    bytes32 public constant CANCEL_PROPOSAL_ROLE =\n        keccak256(\"CANCEL_PROPOSAL_ROLE\");\n\n    uint256 public constant D = 1e7;\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18;\n    uint256 private constant TWO_128 = 1 << 128; // 2 ^ 128\n    uint256 private constant TWO_127 = 1 << 127; // 2^127\n    uint256 public constant ABSTAIN_PROPOSAL_ID = 1;\n    uint64 public constant MAX_STAKED_PROPOSALS = 10;\n\n    string private constant ERROR_PROPOSAL_DOES_NOT_EXIST =\n        \"QG_PROPOSAL_DOES_NOT_EXIST\";\n    string private constant ERROR_PROPOSAL_NOT_ACTIVE =\n        \"QG_PROPOSAL_NOT_ACTIVE\";\n    string private constant ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL =\n        \"QG_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_INSUFFICIENT_CONVICTION =\n        \"QG_INSUFFICIENT_CONVICTION\";\n    string private constant ERROR_SENDER_CANNOT_CANCEL =\n        \"QG_SENDER_CANNOT_CANCEL\";\n    string private constant ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL =\n        \"QG_CANNOT_CANCEL_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_AMOUNT_OVER_MAX_RATIO =\n        \"QG_AMOUNT_OVER_MAX_RATIO\";\n    string private constant ERROR_AMOUNT_CAN_NOT_BE_ZERO =\n        \"QG_AMOUNT_CAN_NOT_BE_ZERO\";\n    string private constant ERROR_ALREADY_POSITIVE_VOTED =\n        \"QG_ALREADY_POSITIVE_VOTED\";\n    string private constant ERROR_ALREADY_NEGATIVE_VOTED =\n        \"QG_ALREADY_NEGATIVE_VOTED\";\n    string private constant ERROR_MAX_PROPOSALS_REACHED =\n        \"QG_MAX_PROPOSALS_REACHED\";\n    string private constant ERROR_WITHDRAW_MORE_THAN_VOTED =\n        \"QG_WITHDRAW_MORE_THAN_VOTED\";\n    string private constant ERROR_ONLY_QUARTZ = \"QG_ONLY_QUARTZ\";\n    string private constant ERROR_AUTH_FAILED = \"QG_AUTH_FAILED\";\n    string private constant ERROR_NOT_ENOUGH_INACTIVE_VOTES =\n        \"QG_NOT_ENOUGH_INACTIVE_VOTES\";\n    string private constant ERROR_NO_ENOUGH_VOTES = \"QG_NO_ENOUGH_VOTES\";\n    string private constant ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO =\n        \"QG_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO\";\n    string private constant ERROR_PROPOSAL_THRESHOLD_CAN_NOT_BE_ZERO =\n        \"QG_PROPOSAL_THRESHOLD_CAN_NOT_BE_ZERO\";\n    string private constant ERROR_PROPOSAL_ACTIVE_PERIOD_CAN_NOT_BE_ZERO =\n        \"QG_PROPOSAL_ACTIVE_PERIOD_CAN_NOT_BE_ZERO\";\n\n    enum ProposalStatus {Cancelled, Active, Executed}\n\n    struct Vote {\n        uint256 id;\n        uint256 totalVotes;\n        uint256 convictionLast;\n        uint256 blockLast;\n    }\n\n    struct Proposal {\n        Vote positiveVotes;\n        Vote negativeVotes;\n        ProposalStatus proposalStatus;\n        address submitter;\n        uint64 expiration;\n    }\n\n    mapping(uint256 => mapping(address => uint256)) public userVotes;\n    uint256 public lastVoteId;\n\n    IQuartz public quartz;\n    uint256 public decay;\n    uint256 public maxRatio;\n    uint256 public weight;\n    uint256 public minThresholdStakePercentage;\n    uint256 public minVotesToPass;\n    uint256 public proposalCounter;\n    uint256 public totalVotes;\n    uint256 public proposalThreshold;\n    uint64 public proposalActivePeriod;\n\n    mapping(uint256 => Proposal) internal proposals;\n    mapping(uint256 => uint256) internal stakedForProposal;\n    mapping(address => uint256) internal totalUserVotes;\n    mapping(address => uint256[]) internal voterCastedProposals;\n    mapping(address => mapping(uint256 => uint256))\n        internal userVotedProposalIds;\n    mapping(address => uint256[]) internal userProposals;\n    mapping(address => mapping(uint256 => uint256)) internal userProposalIds;\n\n    event ConvictionSettingsChanged(\n        uint256 decay,\n        uint256 maxRatio,\n        uint256 weight,\n        uint256 minThresholdStakePercentage,\n        uint256 minVotesToPass,\n        uint256 proposalThreshold,\n        uint64 proposalActivePeriod\n    );\n    event ProposalAdded(\n        address indexed entity,\n        uint256 indexed id,\n        string title,\n        bytes link,\n        string description,\n        uint64 expiration\n    );\n    event VoteCasted(\n        address indexed entity,\n        uint256 indexed id,\n        uint256 amount,\n        uint256 conviction,\n        bool support\n    );\n    event VoteWithdrawn(\n        address indexed entity,\n        uint256 indexed id,\n        uint256 amount,\n        uint256 conviction,\n        bool support\n    );\n    event ProposalExecuted(\n        uint256 indexed id,\n        uint256 positiveConviction,\n        uint256 negativeConviction\n    );\n    event ProposalCancelled(uint256 indexed id);\n\n    modifier auth(bytes32 _role) {\n        require(hasRole(_role, msg.sender), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier proposalExists(uint256 _proposalId) {\n        require(\n            _proposalId == ABSTAIN_PROPOSAL_ID ||\n                proposals[_proposalId].submitter != address(0),\n            ERROR_PROPOSAL_DOES_NOT_EXIST\n        );\n        _;\n    }\n\n    modifier onlyQuartz() {\n        require(msg.sender == address(quartz), ERROR_ONLY_QUARTZ);\n        _;\n    }\n\n    function initialize(\n        IQuartz _quartz,\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage,\n        uint256 _minVotesToPass,\n        uint256 _proposalThreshold,\n        uint64 _proposalActivePeriod\n    ) public initializer {\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        require(address(_quartz) != address(0));\n        quartz = _quartz;\n        // First proposal should be #2, #1 is reserved for abstain proposal, #0 is not used for better UX.\n        proposalCounter = ABSTAIN_PROPOSAL_ID + 1;\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n        require(_minVotesToPass > 0, ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO);\n        minVotesToPass = _minVotesToPass;\n        require(\n            _proposalThreshold > 0,\n            ERROR_PROPOSAL_THRESHOLD_CAN_NOT_BE_ZERO\n        );\n        proposalThreshold = _proposalThreshold;\n        require(\n            _proposalActivePeriod > 0,\n            ERROR_PROPOSAL_ACTIVE_PERIOD_CAN_NOT_BE_ZERO\n        );\n        proposalActivePeriod = _proposalActivePeriod;\n\n        Vote memory abstainVote1 =\n            Vote({id: 1, totalVotes: 0, convictionLast: 0, blockLast: 0});\n        Vote memory abstainVote2 =\n            Vote({id: 2, totalVotes: 0, convictionLast: 0, blockLast: 0});\n\n        proposals[ABSTAIN_PROPOSAL_ID] = Proposal({\n            positiveVotes: abstainVote1,\n            negativeVotes: abstainVote2,\n            proposalStatus: ProposalStatus.Active,\n            submitter: address(0),\n            expiration: 0\n        });\n\n        lastVoteId = 2;\n\n        emit ProposalAdded(\n            address(0),\n            ABSTAIN_PROPOSAL_ID,\n            \"Abstain proposal\",\n            \"\",\n            \"\",\n            0\n        );\n    }\n\n    /**\n     * @notice Update the conviction voting parameters\n     * @param _decay The rate at which conviction is accrued or lost from a proposal\n     * @param _maxRatio Proposal threshold parameter\n     * @param _weight Proposal threshold parameter\n     * @param _minThresholdStakePercentage The minimum percent of stake token max supply that is used for calculating\n        conviction\n     * @param _minVotesToPass The minimum votes to be passed\n     * @param _proposalThreshold Vote rep which will be staked to create proposal\n     * @param _proposalActivePeriod Proposal active period\n     */\n    function setConvictionCalculationSettings(\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage,\n        uint256 _minVotesToPass,\n        uint256 _proposalThreshold,\n        uint64 _proposalActivePeriod\n    ) external auth(UPDATE_SETTINGS_ROLE) {\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n\n        require(_minVotesToPass > 0, ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO);\n        minVotesToPass = _minVotesToPass;\n        require(\n            _proposalThreshold > 0,\n            ERROR_PROPOSAL_THRESHOLD_CAN_NOT_BE_ZERO\n        );\n        proposalThreshold = _proposalThreshold;\n        require(\n            _proposalActivePeriod > 0,\n            ERROR_PROPOSAL_ACTIVE_PERIOD_CAN_NOT_BE_ZERO\n        );\n        proposalActivePeriod = _proposalActivePeriod;\n\n        emit ConvictionSettingsChanged(\n            _decay,\n            _maxRatio,\n            _weight,\n            _minThresholdStakePercentage,\n            _minVotesToPass,\n            _proposalThreshold,\n            _proposalActivePeriod\n        );\n    }\n\n    /**\n     * @notice Add proposal\n     * @param _title Title of the proposal\n     * @param _link IPFS or HTTP link with proposal's description\n     * @param _description Succinct description about proposal\n     */\n    function addProposal(\n        string memory _title,\n        bytes memory _link,\n        string memory _description\n    ) external {\n        uint64 expiration = uint64(block.timestamp) + proposalActivePeriod;\n\n        Proposal storage proposal = proposals[proposalCounter];\n\n        proposal.positiveVotes.id = ++lastVoteId;\n        proposal.negativeVotes.id = ++lastVoteId;\n        proposal.proposalStatus = ProposalStatus.Active;\n        proposal.submitter = msg.sender;\n        proposal.expiration = expiration;\n\n        quartz.moveVotesToGovernor(msg.sender, proposalThreshold);\n        stakedForProposal[proposalCounter] = proposalThreshold;\n        userProposals[msg.sender].push(proposalCounter);\n        userProposalIds[msg.sender][proposalCounter] = userProposals[msg.sender]\n            .length;\n\n        emit ProposalAdded(\n            msg.sender,\n            proposalCounter,\n            _title,\n            _link,\n            _description,\n            expiration\n        );\n        proposalCounter += 1;\n    }\n\n    /**\n     * @notice Cast votes on proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of votes to cast\n     * @param _support Positive or negative\n     */\n    function castVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        bool _support\n    ) external {\n        _castVotes(_proposalId, _amount, msg.sender, _support);\n    }\n\n    /**\n     * @notice Cast all available votes to proposal\n     * @param _proposalId Proposal id\n     * @param _support Positive or negative\n     */\n    function castAllVotes(uint256 _proposalId, bool _support) external {\n        _castVotes(\n            _proposalId,\n            quartz.getCurrentVotes(msg.sender),\n            msg.sender,\n            _support\n        );\n    }\n\n    /**\n     * @notice Withdraw votes from proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of votes to withdraw\n     * @param _support Positive or negative\n     */\n    function withdrawVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        bool _support\n    ) external proposalExists(_proposalId) {\n        _withdrawVotesFromProposal(_proposalId, _amount, msg.sender, _support);\n    }\n\n    /**\n     * @notice Withdraw all votes from executed or cancelled proposal\n     */\n    function withdrawAllInactiveVotes()\n        external\n        returns (uint256 withdrawnAmount)\n    {\n        withdrawnAmount = _withdrawInactiveVotes(0, msg.sender);\n    }\n\n    /**\n     * @dev Withdraw votes from executed or cancelled proposals until a target amount is reached.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawInactiveVotes(uint256 _targetAmount, address _from)\n        internal\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 i = 0;\n        uint256[] memory voterCastedProposalsCopy = voterCastedProposals[_from];\n\n        while (\n            i < voterCastedProposalsCopy.length &&\n            (_targetAmount == 0 || withdrawnAmount < _targetAmount)\n        ) {\n            uint256 proposalId = voterCastedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            if (proposal.proposalStatus != ProposalStatus.Active) {\n                uint256 toWithdraw =\n                    userVotes[proposal.positiveVotes.id][_from] +\n                        userVotes[proposal.negativeVotes.id][_from];\n                if (toWithdraw > 0) {\n                    _withdrawVotesFromProposal(\n                        proposalId,\n                        toWithdraw,\n                        _from,\n                        userVotes[proposal.positiveVotes.id][_from] > 0\n                            ? true\n                            : false\n                    );\n                    withdrawnAmount = withdrawnAmount + toWithdraw;\n                }\n            }\n            i += 1;\n        }\n    }\n\n    /**\n     * @dev Withdraw votes from active proposals until a target amount is reached.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawActiveVotes(uint256 _targetAmount, address _from)\n        internal\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 i = 0;\n        uint256[] memory voterCastedProposalsCopy = voterCastedProposals[_from];\n\n        while (\n            i < voterCastedProposalsCopy.length &&\n            withdrawnAmount < _targetAmount\n        ) {\n            uint256 proposalId = voterCastedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            if (proposal.proposalStatus == ProposalStatus.Active) {\n                // In active proposals, we only subtract the needed amount to reach the target\n                uint256 toWithdraw =\n                    MathUpgradeable.min(\n                        _targetAmount - withdrawnAmount,\n                        userVotes[proposal.positiveVotes.id][_from] +\n                            userVotes[proposal.negativeVotes.id][_from]\n                    );\n                if (toWithdraw > 0) {\n                    _withdrawVotesFromProposal(\n                        proposalId,\n                        toWithdraw,\n                        _from,\n                        userVotes[proposal.positiveVotes.id][_from] > 0\n                            ? true\n                            : false\n                    );\n                    withdrawnAmount = withdrawnAmount + toWithdraw;\n                }\n            }\n            i += 1;\n        }\n    }\n\n    /**\n     * @dev Cancel proposals to force withdraw staked votes.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawStakedFromProposals(uint256 _targetAmount, address _from)\n        internal\n        returns (uint256 withdrawnAmount)\n    {\n        uint256[] storage userProposalsList = userProposals[_from];\n        uint256 i = userProposalsList.length - 1;\n\n        while (withdrawnAmount < _targetAmount) {\n            uint256 proposalId = userProposalsList[i];\n            withdrawnAmount = withdrawnAmount + stakedForProposal[proposalId];\n            cancelProposal(userProposalsList[i]);\n            if (i == 0) {\n                break;\n            }\n            i = i - 1;\n        }\n    }\n\n    /**\n     * @notice Withdraw all votes from proposal\n     * @param _proposalId Proposal id\n     * @param _support Positive or negative\n     */\n    function withdrawAllVotesFromProposal(uint256 _proposalId, bool _support)\n        external\n        proposalExists(_proposalId)\n    {\n        _withdrawVotesFromProposal(\n            _proposalId,\n            _support\n                ? userVotes[proposals[_proposalId].positiveVotes.id][msg.sender]\n                : userVotes[proposals[_proposalId].negativeVotes.id][\n                    msg.sender\n                ],\n            msg.sender,\n            _support\n        );\n    }\n\n    /**\n     * @notice Execute proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function executeProposal(uint256 _proposalId)\n        external\n        proposalExists(_proposalId)\n    {\n        Proposal storage proposal = proposals[_proposalId];\n\n        require(\n            _proposalId != ABSTAIN_PROPOSAL_ID,\n            ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\n        );\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n        Vote storage positiveVotes = proposal.positiveVotes;\n        Vote storage negativeVotes = proposal.negativeVotes;\n        _calculateAndSetConviction(positiveVotes, positiveVotes.totalVotes);\n        _calculateAndSetConviction(negativeVotes, negativeVotes.totalVotes);\n\n        require(\n            positiveVotes.convictionLast > negativeVotes.convictionLast &&\n                positiveVotes.convictionLast - negativeVotes.convictionLast >=\n                calculateThreshold(),\n            ERROR_INSUFFICIENT_CONVICTION\n        );\n\n        proposal.proposalStatus = ProposalStatus.Executed;\n        quartz.moveVotesFromGovernor(\n            proposal.submitter,\n            stakedForProposal[_proposalId]\n        );\n        stakedForProposal[_proposalId] = 0;\n        uint256 proposalIdx = userProposalIds[proposal.submitter][_proposalId];\n        uint256 lastProposalId =\n            userProposals[proposal.submitter][\n                userProposals[proposal.submitter].length - 1\n            ];\n        userProposals[proposal.submitter][proposalIdx - 1] = lastProposalId;\n        userProposalIds[proposal.submitter][_proposalId] = 0;\n        userProposalIds[proposal.submitter][lastProposalId] = proposalIdx;\n        userProposals[proposal.submitter].pop();\n\n        emit ProposalExecuted(\n            _proposalId,\n            proposal.positiveVotes.convictionLast,\n            proposal.negativeVotes.convictionLast\n        );\n    }\n\n    /**\n     * @notice Cancel proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function cancelProposal(uint256 _proposalId)\n        public\n        proposalExists(_proposalId)\n    {\n        Proposal storage proposal = proposals[_proposalId];\n\n        require(\n            _proposalId != ABSTAIN_PROPOSAL_ID,\n            ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL\n        );\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n\n        // slither-disable-next-line timestamp\n        if (proposal.expiration > uint64(block.timestamp)) {\n            bool senderHasPermission =\n                hasRole(CANCEL_PROPOSAL_ROLE, msg.sender);\n            require(\n                proposal.submitter == msg.sender ||\n                    senderHasPermission ||\n                    msg.sender == address(quartz),\n                ERROR_SENDER_CANNOT_CANCEL\n            );\n        }\n\n        proposal.proposalStatus = ProposalStatus.Cancelled;\n        quartz.moveVotesFromGovernor(\n            proposal.submitter,\n            stakedForProposal[_proposalId]\n        );\n        stakedForProposal[_proposalId] = 0;\n        uint256 proposalIdx = userProposalIds[proposal.submitter][_proposalId];\n        uint256 lastProposalId =\n            userProposals[proposal.submitter][\n                userProposals[proposal.submitter].length - 1\n            ];\n        userProposals[proposal.submitter][proposalIdx - 1] = lastProposalId;\n        userProposalIds[proposal.submitter][_proposalId] = 0;\n        userProposalIds[proposal.submitter][lastProposalId] = proposalIdx;\n        userProposals[proposal.submitter].pop();\n\n        emit ProposalCancelled(_proposalId);\n    }\n\n    /**\n     * @dev Get proposal details\n     * @param _proposalId Proposal id\n     * @return positiveVotes Positive votes info\n     * @return negativeVotes Negative votes info\n     * @return proposalStatus ProposalStatus defining the state of the proposal\n     * @return submitter Submitter of the proposal\n     */\n    function getProposal(uint256 _proposalId)\n        external\n        view\n        returns (\n            Vote memory positiveVotes,\n            Vote memory negativeVotes,\n            ProposalStatus proposalStatus,\n            address submitter,\n            uint64 expiration,\n            uint256 staked\n        )\n    {\n        Proposal storage proposal = proposals[_proposalId];\n        return (\n            proposal.positiveVotes,\n            proposal.negativeVotes,\n            proposal.proposalStatus,\n            proposal.submitter,\n            proposal.expiration,\n            stakedForProposal[_proposalId]\n        );\n    }\n\n    /**\n     * @notice Get stake of voter `_voter` on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     * @param _voter Voter address\n     * @return Positive user votes\n     * @return Negative user votes\n     */\n    function getProposalUserVotes(uint256 _proposalId, address _voter)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            userVotes[proposals[_proposalId].positiveVotes.id][_voter],\n            userVotes[proposals[_proposalId].negativeVotes.id][_voter]\n        );\n    }\n\n    /**\n     * @notice Get the total votes of voter `_voter` on all proposals\n     * @param _voter Voter address\n     * @return Total user votes\n     */\n    function getTotalUserVotes(address _voter) external view returns (uint256) {\n        return totalUserVotes[_voter];\n    }\n\n    /**\n     * @notice Get all proposal ID's voter `_voter` has currently voted\n     * @param _voter Voter address\n     * @return Voter proposals\n     */\n    function getVoterCastedProposals(address _voter)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return voterCastedProposals[_voter];\n    }\n\n    /**\n     * @dev Calculate conviction and store it on the proposal\n     * @param _vote Vote\n     * @param _oldVote Amount of votes on a proposal until now\n     */\n    function _calculateAndSetConviction(Vote storage _vote, uint256 _oldVote)\n        internal\n    {\n        uint256 blockNumber = block.number;\n        assert(_vote.blockLast <= blockNumber);\n        // slither-disable-next-line incorrect-equality\n        if (_vote.blockLast == blockNumber) {\n            return; // Conviction already stored\n        }\n        // calculateConviction and store it\n        uint256 conviction =\n            calculateConviction(\n                blockNumber - _vote.blockLast, // we assert it doesn't overflow above\n                _vote.convictionLast,\n                _oldVote\n            );\n        _vote.blockLast = blockNumber;\n        _vote.convictionLast = conviction;\n    }\n\n    /**\n     * @dev Stake an amount of tokens on a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of staked tokens\n     * @param _from Account from which we stake\n     */\n    function _castVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        address _from,\n        bool _support\n    ) internal proposalExists(_proposalId) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n\n        quartz.moveVotesToGovernor(_from, _amount);\n\n        Vote storage votes;\n\n        if (_support) {\n            require(\n                userVotes[proposal.negativeVotes.id][_from] == 0,\n                ERROR_ALREADY_NEGATIVE_VOTED\n            );\n            votes = proposal.positiveVotes;\n        } else {\n            require(\n                userVotes[proposal.positiveVotes.id][_from] == 0,\n                ERROR_ALREADY_POSITIVE_VOTED\n            );\n            votes = proposal.negativeVotes;\n        }\n        uint256 previousVote = votes.totalVotes;\n        votes.totalVotes = previousVote + _amount;\n        userVotes[votes.id][_from] = userVotes[votes.id][_from] + _amount;\n        totalUserVotes[_from] = totalUserVotes[_from] + _amount;\n        totalVotes = totalVotes + _amount;\n\n        if (votes.blockLast == 0) {\n            votes.blockLast = block.number;\n        } else {\n            _calculateAndSetConviction(votes, previousVote);\n        }\n\n        _updateVoterCastedProposals(_proposalId, _from);\n\n        emit VoteCasted(\n            _from,\n            _proposalId,\n            _amount,\n            votes.convictionLast,\n            _support\n        );\n    }\n\n    function _updateVoterCastedProposals(\n        uint256 _proposalId,\n        address _submitter\n    ) internal {\n        uint256[] storage voterCastedProposalsArray =\n            voterCastedProposals[_submitter];\n\n        if (userVotedProposalIds[_submitter][_proposalId] == 0) {\n            require(\n                voterCastedProposalsArray.length < MAX_STAKED_PROPOSALS,\n                ERROR_MAX_PROPOSALS_REACHED\n            );\n            voterCastedProposalsArray.push(_proposalId);\n            userVotedProposalIds[_submitter][\n                _proposalId\n            ] = voterCastedProposalsArray.length;\n        }\n    }\n\n    /**\n     * @dev Withdraw an amount of tokens from a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of withdrawn tokens\n     * @param _from Account to withdraw from\n     * @param _support Positive or negative\n     */\n    function _withdrawVotesFromProposal(\n        uint256 _proposalId,\n        uint256 _amount,\n        address _from,\n        bool _support\n    ) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        Vote storage votes =\n            _support ? proposal.positiveVotes : proposal.negativeVotes;\n\n        require(\n            userVotes[votes.id][_from] >= _amount,\n            ERROR_WITHDRAW_MORE_THAN_VOTED\n        );\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n\n        quartz.moveVotesFromGovernor(_from, _amount);\n        uint256 previousVote = votes.totalVotes;\n\n        votes.totalVotes = previousVote - _amount;\n        userVotes[votes.id][_from] = userVotes[votes.id][_from] - _amount;\n        totalUserVotes[_from] = totalUserVotes[_from] - _amount;\n        totalVotes = totalVotes - _amount;\n\n        if (userVotes[votes.id][_from] == 0) {\n            uint256 index = userVotedProposalIds[_from][_proposalId] - 1;\n            userVotedProposalIds[_from][_proposalId] = 0;\n            uint256 lastIndex = voterCastedProposals[_from].length - 1;\n            uint256 lastProposalId = voterCastedProposals[_from][lastIndex];\n            voterCastedProposals[_from][index] = lastProposalId;\n            userVotedProposalIds[_from][lastProposalId] = index + 1;\n\n            voterCastedProposals[_from].pop();\n        }\n\n        if (proposal.proposalStatus == ProposalStatus.Active) {\n            _calculateAndSetConviction(votes, previousVote);\n        }\n\n        emit VoteWithdrawn(\n            _from,\n            _proposalId,\n            _amount,\n            votes.convictionLast,\n            _support\n        );\n    }\n\n    /**\n     * @dev Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a)\n     * Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\n     * @param _timePassed Number of blocks since last conviction record\n     * @param _lastConv Last conviction record\n     * @param _oldAmount Amount of tokens staked until now\n     * @return Current conviction\n     */\n    function calculateConviction(\n        uint256 _timePassed,\n        uint256 _lastConv,\n        uint256 _oldAmount\n    ) public view returns (uint256) {\n        uint256 t = uint256(_timePassed);\n        // atTWO_128 = 2^128 * a^t\n        uint256 atTWO_128 = _pow((decay << 128) / D, t);\n        // solium-disable-previous-line\n        // conviction = (atTWO_128 * _lastConv + _oldAmount * D * (2^128 - atTWO_128) / (D - aD) + 2^127) / 2^128\n        return\n            (((atTWO_128 * _lastConv) +\n                ((_oldAmount * D * (TWO_128 - atTWO_128)) / (D - decay))) +\n                TWO_127) >> 128;\n    }\n\n    /**\n     * @dev Formula: ρ * totalStaked / (1 - a) / (β - minVotesToPass / total)**2\n     * For the Solidity implementation we amplify ρ and β and simplify the formula:\n     * weight = ρ * D\n     * maxRatio = β * D\n     * decay = a * D\n     * threshold =\n     *     weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - minVotesToPass * D) ** 2\n     * @return _threshold Threshold a proposal's conviction should surpass in order to be able to\n     * executed it.\n     */\n    function calculateThreshold() public view returns (uint256 _threshold) {\n        uint256 funds = quartz.totalStaked();\n        require(\n            maxRatio * funds > minVotesToPass * D,\n            ERROR_AMOUNT_OVER_MAX_RATIO\n        );\n        // denom = maxRatio * 2 ** 64 / D  - minVotesToPass * 2 ** 64 / funds\n        uint256 denom = (maxRatio << 64) / D - (minVotesToPass << 64) / funds;\n        // _threshold = (weight * 2 ** 128 / D) / (denom ** 2 / 2 ** 64) * totalVotes * D / 2 ** 128\n        _threshold =\n            (((weight << 128) * _totalVotes()) /\n                (((denom * denom) >> 64) * (D - decay))) >>\n            64;\n    }\n\n    function _totalVotes() internal view returns (uint256) {\n        uint256 minTotalVotes =\n            (quartz.totalStaked() * minThresholdStakePercentage) /\n                ONE_HUNDRED_PERCENT;\n        return totalVotes < minTotalVotes ? minTotalVotes : totalVotes;\n    }\n\n    /**\n     * @dev Withdraw required votes to move delegates\n     */\n    function withdrawRequiredVotes(\n        address _from,\n        uint256 _amount,\n        bool force\n    ) external onlyQuartz {\n        uint256 inactiveWithdrawn = _withdrawInactiveVotes(_amount, _from);\n        if (inactiveWithdrawn < _amount) {\n            require(force, ERROR_NOT_ENOUGH_INACTIVE_VOTES);\n            uint256 activeWithdrawn =\n                _withdrawActiveVotes(_amount - inactiveWithdrawn, _from);\n            uint256 stakedWithdrawn = 0;\n            if (inactiveWithdrawn + (activeWithdrawn) < _amount) {\n                stakedWithdrawn = _withdrawStakedFromProposals(\n                    _amount - inactiveWithdrawn - activeWithdrawn,\n                    _from\n                );\n            }\n            require(\n                inactiveWithdrawn + activeWithdrawn + stakedWithdrawn >=\n                    _amount,\n                ERROR_NO_ENOUGH_VOTES\n            );\n        }\n    }\n\n    /**\n     * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\n     * 2^128 and parameter _b should be less than 2^128.\n     * @param _a left argument\n     * @param _b right argument\n     * @return _result _a * _b / 2^128\n     */\n    function _mul(uint256 _a, uint256 _b)\n        internal\n        pure\n        returns (uint256 _result)\n    {\n        require(_a <= TWO_128, \"_a should be less than or equal to 2^128\");\n        require(_b < TWO_128, \"_b should be less than 2^128\");\n        return (_a * _b + TWO_127) >> 128;\n    }\n\n    /**\n     * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\n     *\n     * @param _a left argument\n     * @param _b right argument\n     * @return _result (_a / 2^128)^_b * 2^128\n     */\n    function _pow(uint256 _a, uint256 _b)\n        internal\n        pure\n        returns (uint256 _result)\n    {\n        require(_a < TWO_128, \"_a should be less than 2^128\");\n        uint256 a = _a;\n        uint256 b = _b;\n        _result = TWO_128;\n\n        while (b > 0) {\n            // slither-disable-next-line incorrect-equality\n            if (b & 1 == 0) {\n                a = _mul(a, a);\n                b >>= 1;\n            } else {\n                _result = _mul(_result, a);\n                b -= 1;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/test/Echidna_QuartzGovernor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"../QuartzGovernor.sol\";\n\ncontract Echidna_QuartzGovernor is QuartzGovernor {\n    uint256 lastTimestamp;\n\n    constructor() {\n        initialize(\n            IQuartz(address(this)),\n            9999799,\n            1000000,\n            2500,\n            200000000000000000,\n            100000000000000000000,\n            100000000000000000000000,\n            2592000\n        );\n        lastTimestamp = block.timestamp;\n    }\n\n    // successively wait for periods of equal time\n    // conviction should always grow, but less than in the previous period\n    function test_convictionContinuousGrowth(\n        uint256 _initialConv,\n        uint256 _amount,\n        uint8 _periods\n    ) external {\n        require(_amount > 1 ether);\n        require(_periods > 1 minutes);\n\n        uint256 period = block.timestamp - lastTimestamp;\n        require(period > 0);\n        lastTimestamp = block.timestamp;\n\n        uint256 currentGrowth = type(uint256).max;\n        uint256 currentConv = _initialConv;\n\n        for (uint256 i = 0; i < _periods; ++i) {\n            uint256 nextConv =\n                calculateConviction(period, currentConv, _amount);\n            assert(nextConv > currentConv);\n            uint256 nextGrowth = nextConv - currentConv;\n\n            assert(nextGrowth < currentGrowth);\n\n            currentConv = nextConv;\n            currentGrowth = nextGrowth;\n        }\n    }\n\n    // starting from an initial amount and convition,\n    // a given number of votes is removed.\n    // At that point, conviction should drop continuously following a curve\n    // where each period has less conviciton than the previous, with the drop\n    // being steeper at the beginning\n    function test_removingVotesContinuouslyDropsConviction(\n        uint256 _initialConv,\n        uint256 _initialAmount,\n        uint256 _amountToRemove,\n        uint8 _periods\n    ) external {\n        require(_initialAmount > 1 ether);\n        require(_amountToRemove > 0.01 ether);\n        require(_amountToRemove >= _initialAmount);\n        require(_periods > 1 minutes);\n\n        uint256 period = block.timestamp - lastTimestamp;\n        require(period > 0);\n        lastTimestamp = block.timestamp;\n\n        uint256 currentDecay = 0;\n        uint256 currentConv = _initialConv;\n\n        uint256 finalAmount = _initialAmount - _amountToRemove;\n\n        for (uint256 i = 0; i < _periods; ++i) {\n            uint256 nextConv =\n                calculateConviction(period, currentConv, finalAmount);\n            assert(nextConv < currentConv);\n            uint256 nextDecay = currentConv - nextConv;\n\n            assert(nextDecay < currentDecay);\n\n            currentConv = nextConv;\n            currentDecay = nextDecay;\n        }\n    }\n\n    // TODO this currently fails for _pow(1, 2)\n    // Is this expected? is it a problem?\n    function test_pow(uint256 _a, uint256 _b) external pure {\n        require(_a < (1 << 128));\n        require(_b < (1 << 128));\n\n        uint256 result = _pow(_a, _b);\n\n        if (_b == 0) {\n            assert(result == 1);\n        } else if (_a <= 1 || _b == 1) {\n            assert(result == _a);\n        } else {\n            assert(result > _a);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}