{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IQuartz.sol": {
      "content": "pragma solidity 0.7.3;\n\ninterface IQuartz {\n    function moveVotesToGovernor(address user, uint256 amount) external;\n\n    function moveVotesFromGovernor(address user, uint256 amount) external;\n\n    function getCurrentVotes(address account) external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n}\n"
    },
    "contracts/QuartzGovernor.sol": {
      "content": "pragma solidity 0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IQuartz.sol\";\n\ncontract QuartzGovernor is AccessControl {\n    using SafeMath for uint256;\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant UPDATE_SETTINGS_ROLE =\n        keccak256(\"UPDATE_SETTINGS_ROLE\");\n    bytes32 public constant CREATE_PROPOSALS_ROLE =\n        keccak256(\"CREATE_PROPOSALS_ROLE\");\n    bytes32 public constant CANCEL_PROPOSAL_ROLE =\n        keccak256(\"CANCEL_PROPOSAL_ROLE\");\n\n    uint256 public constant D = 10000000;\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18;\n    uint256 private constant TWO_128 = 0x100000000000000000000000000000000; // 2^128\n    uint256 private constant TWO_127 = 0x80000000000000000000000000000000; // 2^127\n    uint256 private constant TWO_64 = 0x10000000000000000; // 2^64\n    uint256 public constant ABSTAIN_PROPOSAL_ID = 1;\n    uint64 public constant MAX_STAKED_PROPOSALS = 10;\n\n    string private constant ERROR_PROPOSAL_DOES_NOT_EXIST =\n        \"QG_PROPOSAL_DOES_NOT_EXIST\";\n    string private constant ERROR_PROPOSAL_NOT_ACTIVE =\n        \"QG_PROPOSAL_NOT_ACTIVE\";\n    string private constant ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL =\n        \"QG_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_INSUFFICIENT_CONVICTION =\n        \"QG_INSUFFICIENT_CONVICTION\";\n    string private constant ERROR_SENDER_CANNOT_CANCEL =\n        \"QG_SENDER_CANNOT_CANCEL\";\n    string private constant ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL =\n        \"QG_CANNOT_CANCEL_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_AMOUNT_OVER_MAX_RATIO =\n        \"QG_AMOUNT_OVER_MAX_RATIO\";\n    string private constant ERROR_AMOUNT_CAN_NOT_BE_ZERO =\n        \"QG_AMOUNT_CAN_NOT_BE_ZERO\";\n    string private constant ERROR_VOTES_MORE_THAN_AVAILABLE =\n        \"QG_VOTES_MORE_THAN_AVAILABLE\";\n    string private constant ERROR_ALREADY_POSITIVE_VOTED =\n        \"QG_ALREADY_POSITIVE_VOTED\";\n    string private constant ERROR_ALREADY_NEGATIVE_VOTED =\n        \"QG_ALREADY_NEGATIVE_VOTED\";\n    string private constant ERROR_MAX_PROPOSALS_REACHED =\n        \"QG_MAX_PROPOSALS_REACHED\";\n    string private constant ERROR_WITHDRAW_MORE_THAN_VOTED =\n        \"QG_WITHDRAW_MORE_THAN_VOTED\";\n    string private constant ERROR_ONLY_QUARTZ = \"QG_ONLY_QUARTZ\";\n    string private constant ERROR_AUTH_FAILED = \"QG_AUTH_FAILED\";\n    string private constant ERROR_NOT_ENOUGH_INACTIVE_VOTES =\n        \"QG_NOT_ENOUGH_INACTIVE_VOTES\";\n    string private constant ERROR_NO_ENOUGH_VOTES = \"QG_NO_ENOUGH_VOTES\";\n    string private constant ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO =\n        \"QG_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO\";\n\n    enum ProposalStatus {\n        Cancelled, // A vote that has been cancelled\n        Active, // A vote that has been reported to Agreements\n        Executed // A vote that has been executed\n    }\n\n    struct Vote {\n        uint256 id;\n        uint256 totalVotes;\n        uint256 convictionLast;\n        uint256 blockLast;\n    }\n\n    struct Proposal {\n        Vote positiveVotes;\n        Vote negativeVotes;\n        ProposalStatus proposalStatus;\n        address submitter;\n    }\n\n    mapping(uint256 => mapping(address => uint256)) public userVotes;\n    uint256 public lastVoteId;\n\n    IQuartz public immutable quartz;\n    uint256 public decay;\n    uint256 public maxRatio;\n    uint256 public weight;\n    uint256 public minThresholdStakePercentage;\n    uint256 public minVotesToPass;\n    uint256 public proposalCounter;\n    uint256 public totalVotes;\n\n    mapping(uint256 => Proposal) internal proposals;\n    mapping(address => uint256) internal totalUserVotes;\n    mapping(address => uint256[]) internal voterCastedProposals;\n    mapping(address => mapping(uint256 => uint256))\n        internal userVotedProposalIds;\n\n    event ConvictionSettingsChanged(\n        uint256 decay,\n        uint256 maxRatio,\n        uint256 weight,\n        uint256 minThresholdStakePercentage,\n        uint256 minVotesToPass\n    );\n    event ProposalAdded(\n        address indexed entity,\n        uint256 indexed id,\n        string title,\n        bytes link\n    );\n    event VoteCasted(\n        address indexed entity,\n        uint256 indexed id,\n        uint256 amount,\n        uint256 conviction,\n        bool support\n    );\n    event VoteWithdrawn(\n        address indexed entity,\n        uint256 indexed id,\n        uint256 amount,\n        uint256 conviction,\n        bool support\n    );\n    event ProposalExecuted(\n        uint256 indexed id,\n        uint256 positiveConviction,\n        uint256 negativeConviction\n    );\n    event ProposalCancelled(uint256 indexed id);\n\n    modifier auth(bytes32 _role) {\n        require(hasRole(_role, msg.sender), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier proposalExists(uint256 _proposalId) {\n        require(\n            _proposalId == ABSTAIN_PROPOSAL_ID ||\n                proposals[_proposalId].submitter != address(0),\n            ERROR_PROPOSAL_DOES_NOT_EXIST\n        );\n        _;\n    }\n\n    modifier onlyQuartz() {\n        require(msg.sender == address(quartz), ERROR_ONLY_QUARTZ);\n        _;\n    }\n\n    constructor(\n        IQuartz _quartz,\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage,\n        uint256 _minVotesToPass\n    ) {\n        _setRoleAdmin(UPDATE_SETTINGS_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CREATE_PROPOSALS_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(CANCEL_PROPOSAL_ROLE, ADMIN_ROLE);\n        _setupRole(ADMIN_ROLE, msg.sender);\n\n        quartz = _quartz;\n        proposalCounter = ABSTAIN_PROPOSAL_ID.add(1); // First proposal should be #2, #1 is reserved for abstain proposal, #0 is not used for better UX.\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n        require(_minVotesToPass > 0, ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO);\n        minVotesToPass = _minVotesToPass;\n\n        Vote memory abstainVote1 =\n            Vote({id: 1, totalVotes: 0, convictionLast: 0, blockLast: 0});\n        Vote memory abstainVote2 =\n            Vote({id: 2, totalVotes: 0, convictionLast: 0, blockLast: 0});\n\n        proposals[ABSTAIN_PROPOSAL_ID] = Proposal({\n            positiveVotes: abstainVote1,\n            negativeVotes: abstainVote2,\n            proposalStatus: ProposalStatus.Active,\n            submitter: address(0)\n        });\n\n        lastVoteId = 2;\n\n        emit ProposalAdded(\n            address(0),\n            ABSTAIN_PROPOSAL_ID,\n            \"Abstain proposal\",\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Update the conviction voting parameters\n     * @param _decay The rate at which conviction is accrued or lost from a proposal\n     * @param _maxRatio Proposal threshold parameter\n     * @param _weight Proposal threshold parameter\n     * @param _minThresholdStakePercentage The minimum percent of stake token max supply that is used for calculating\n        conviction\n     * @param _minVotesToPass The minimum votes to be passed\n     */\n    function setConvictionCalculationSettings(\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage,\n        uint256 _minVotesToPass\n    ) public auth(UPDATE_SETTINGS_ROLE) {\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n\n        require(_minVotesToPass > 0, ERROR_MIN_VOTES_TO_PASS_CAN_NOT_BE_ZERO);\n        minVotesToPass = _minVotesToPass;\n\n        emit ConvictionSettingsChanged(\n            _decay,\n            _maxRatio,\n            _weight,\n            _minThresholdStakePercentage,\n            _minVotesToPass\n        );\n    }\n\n    /**\n     * @notice Add proposal\n     * @param _title Title of the proposal\n     * @param _link IPFS or HTTP link with proposal's description\n     */\n    function addProposal(string memory _title, bytes memory _link)\n        external\n        auth(CREATE_PROPOSALS_ROLE)\n    {\n        Vote memory emptyVote1 =\n            Vote({\n                id: lastVoteId.add(1),\n                totalVotes: 0,\n                convictionLast: 0,\n                blockLast: 0\n            });\n        Vote memory emptyVote2 =\n            Vote({\n                id: lastVoteId.add(2),\n                totalVotes: 0,\n                convictionLast: 0,\n                blockLast: 0\n            });\n\n        proposals[proposalCounter] = Proposal({\n            positiveVotes: emptyVote1,\n            negativeVotes: emptyVote2,\n            proposalStatus: ProposalStatus.Active,\n            submitter: msg.sender\n        });\n\n        lastVoteId = lastVoteId.add(2);\n\n        emit ProposalAdded(msg.sender, proposalCounter, _title, _link);\n        proposalCounter = proposalCounter.add(1);\n    }\n\n    /**\n     * @notice Cast votes on proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of votes to cast\n     * @param _support Positive or negative\n     */\n    function castVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        bool _support\n    ) external {\n        _castVotes(_proposalId, _amount, msg.sender, _support);\n    }\n\n    /**\n     * @notice Cast all available votes to proposal\n     * @param _proposalId Proposal id\n     * @param _support Positive or negative\n     */\n    function castAllVotes(uint256 _proposalId, bool _support) external {\n        _castVotes(\n            _proposalId,\n            quartz.getCurrentVotes(msg.sender),\n            msg.sender,\n            _support\n        );\n    }\n\n    /**\n     * @notice Withdraw votes from proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of votes to withdraw\n     * @param _support Positive or negative\n     */\n    function withdrawVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        bool _support\n    ) external proposalExists(_proposalId) {\n        _withdrawVotesFromProposal(_proposalId, _amount, msg.sender, _support);\n    }\n\n    /**\n     * @notice Withdraw all votes from executed or cancelled proposal\n     */\n    function withdrawAllInactiveVotes()\n        external\n        returns (uint256 withdrawnAmount)\n    {\n        withdrawnAmount = _withdrawInactiveVotes(0, msg.sender);\n    }\n\n    /**\n     * @dev Withdraw votes from executed or cancelled proposals until a target amount is reached.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawInactiveVotes(uint256 _targetAmount, address _from)\n        internal\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 i;\n        uint256[] memory voterCastedProposalsCopy = voterCastedProposals[_from];\n\n        while (\n            i < voterCastedProposalsCopy.length &&\n            (_targetAmount == 0 || withdrawnAmount < _targetAmount)\n        ) {\n            uint256 proposalId = voterCastedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            if (proposal.proposalStatus != ProposalStatus.Active) {\n                uint256 toWithdraw =\n                    userVotes[proposal.positiveVotes.id][_from].add(\n                        userVotes[proposal.negativeVotes.id][_from]\n                    );\n                if (toWithdraw > 0) {\n                    _withdrawVotesFromProposal(\n                        proposalId,\n                        toWithdraw,\n                        _from,\n                        userVotes[proposal.positiveVotes.id][_from] > 0\n                            ? true\n                            : false\n                    );\n                    withdrawnAmount = withdrawnAmount.add(toWithdraw);\n                }\n            }\n            i += 1;\n        }\n    }\n\n    /**\n     * @dev Withdraw votes from active proposals until a target amount is reached.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawActiveVotes(uint256 _targetAmount, address _from)\n        internal\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 i;\n        uint256[] memory voterCastedProposalsCopy = voterCastedProposals[_from];\n\n        while (\n            i < voterCastedProposalsCopy.length &&\n            withdrawnAmount < _targetAmount\n        ) {\n            uint256 proposalId = voterCastedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            if (proposal.proposalStatus == ProposalStatus.Active) {\n                // In active proposals, we only subtract the needed amount to reach the target\n                uint256 toWithdraw =\n                    Math.min(\n                        _targetAmount.sub(withdrawnAmount),\n                        userVotes[proposal.positiveVotes.id][_from].add(\n                            userVotes[proposal.negativeVotes.id][_from]\n                        )\n                    );\n                if (toWithdraw > 0) {\n                    _withdrawVotesFromProposal(\n                        proposalId,\n                        toWithdraw,\n                        _from,\n                        userVotes[proposal.positiveVotes.id][_from] > 0\n                            ? true\n                            : false\n                    );\n                    withdrawnAmount = withdrawnAmount.add(toWithdraw);\n                }\n            }\n            i += 1;\n        }\n    }\n\n    /**\n     * @notice Withdraw all votes from proposal\n     * @param _proposalId Proposal id\n     * @param _support Positive or negative\n     */\n    function withdrawAllVotesFromProposal(uint256 _proposalId, bool _support)\n        external\n        proposalExists(_proposalId)\n    {\n        _withdrawVotesFromProposal(\n            _proposalId,\n            _support\n                ? userVotes[proposals[_proposalId].positiveVotes.id][msg.sender]\n                : userVotes[proposals[_proposalId].negativeVotes.id][\n                    msg.sender\n                ],\n            msg.sender,\n            _support\n        );\n    }\n\n    /**\n     * @notice Execute proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function executeProposal(uint256 _proposalId)\n        external\n        proposalExists(_proposalId)\n    {\n        Proposal storage proposal = proposals[_proposalId];\n\n        require(\n            _proposalId != ABSTAIN_PROPOSAL_ID,\n            ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\n        );\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n        Vote storage positiveVotes = proposal.positiveVotes;\n        Vote storage negativeVotes = proposal.negativeVotes;\n        _calculateAndSetConviction(positiveVotes, positiveVotes.totalVotes);\n        _calculateAndSetConviction(negativeVotes, negativeVotes.totalVotes);\n\n        require(\n            positiveVotes.convictionLast > negativeVotes.convictionLast &&\n                positiveVotes.convictionLast.sub(\n                    negativeVotes.convictionLast\n                ) >=\n                calculateThreshold(),\n            ERROR_INSUFFICIENT_CONVICTION\n        );\n\n        proposal.proposalStatus = ProposalStatus.Executed;\n\n        emit ProposalExecuted(\n            _proposalId,\n            proposal.positiveVotes.convictionLast,\n            proposal.negativeVotes.convictionLast\n        );\n    }\n\n    /**\n     * @notice Cancel proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function cancelProposal(uint256 _proposalId)\n        external\n        proposalExists(_proposalId)\n    {\n        Proposal storage proposal = proposals[_proposalId];\n\n        bool senderHasPermission = hasRole(CANCEL_PROPOSAL_ROLE, msg.sender);\n        require(\n            proposal.submitter == msg.sender || senderHasPermission,\n            ERROR_SENDER_CANNOT_CANCEL\n        );\n        require(\n            _proposalId != ABSTAIN_PROPOSAL_ID,\n            ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL\n        );\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n\n        proposal.proposalStatus = ProposalStatus.Cancelled;\n\n        emit ProposalCancelled(_proposalId);\n    }\n\n    /**\n     * @dev Get proposal details\n     * @param _proposalId Proposal id\n     * @return positiveVotes Positive votes info\n     * @return negativeVotes Negative votes info\n     * @return proposalStatus ProposalStatus defining the state of the proposal\n     * @return submitter Submitter of the proposal\n     */\n    function getProposal(uint256 _proposalId)\n        external\n        view\n        returns (\n            Vote memory positiveVotes,\n            Vote memory negativeVotes,\n            ProposalStatus proposalStatus,\n            address submitter\n        )\n    {\n        Proposal storage proposal = proposals[_proposalId];\n        return (\n            proposal.positiveVotes,\n            proposal.negativeVotes,\n            proposal.proposalStatus,\n            proposal.submitter\n        );\n    }\n\n    /**\n     * @notice Get stake of voter `_voter` on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     * @param _voter Voter address\n     * @return Positive user votes\n     * @return Negative user votes\n     */\n    function getProposalUserVotes(uint256 _proposalId, address _voter)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            userVotes[proposals[_proposalId].positiveVotes.id][_voter],\n            userVotes[proposals[_proposalId].negativeVotes.id][_voter]\n        );\n    }\n\n    /**\n     * @notice Get the total votes of voter `_voter` on all proposals\n     * @param _voter Voter address\n     * @return Total user votes\n     */\n    function getTotalUserVotes(address _voter) external view returns (uint256) {\n        return totalUserVotes[_voter];\n    }\n\n    /**\n     * @notice Get all proposal ID's voter `_voter` has currently voted\n     * @param _voter Voter address\n     * @return Voter proposals\n     */\n    function getVoterCastedProposals(address _voter)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return voterCastedProposals[_voter];\n    }\n\n    /**\n     * @dev Calculate conviction and store it on the proposal\n     * @param _vote Vote\n     * @param _oldVote Amount of votes on a proposal until now\n     */\n    function _calculateAndSetConviction(Vote storage _vote, uint256 _oldVote)\n        internal\n    {\n        uint256 blockNumber = block.number;\n        assert(_vote.blockLast <= blockNumber);\n        if (_vote.blockLast == blockNumber) {\n            return; // Conviction already stored\n        }\n        // calculateConviction and store it\n        uint256 conviction =\n            calculateConviction(\n                blockNumber - _vote.blockLast, // we assert it doesn't overflow above\n                _vote.convictionLast,\n                _oldVote\n            );\n        _vote.blockLast = blockNumber;\n        _vote.convictionLast = conviction;\n    }\n\n    /**\n     * @dev Stake an amount of tokens on a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of staked tokens\n     * @param _from Account from which we stake\n     */\n    function _castVotes(\n        uint256 _proposalId,\n        uint256 _amount,\n        address _from,\n        bool _support\n    ) internal proposalExists(_proposalId) {\n        Proposal storage proposal = proposals[_proposalId];\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n        require(\n            proposal.proposalStatus == ProposalStatus.Active,\n            ERROR_PROPOSAL_NOT_ACTIVE\n        );\n\n        quartz.moveVotesToGovernor(_from, _amount);\n\n        Vote storage votes;\n\n        if (_support) {\n            require(\n                userVotes[proposal.negativeVotes.id][_from] == 0,\n                ERROR_ALREADY_NEGATIVE_VOTED\n            );\n            votes = proposal.positiveVotes;\n        } else {\n            require(\n                userVotes[proposal.positiveVotes.id][_from] == 0,\n                ERROR_ALREADY_POSITIVE_VOTED\n            );\n            votes = proposal.negativeVotes;\n        }\n        uint256 previousVote = votes.totalVotes;\n        votes.totalVotes = previousVote.add(_amount);\n        userVotes[votes.id][_from] = userVotes[votes.id][_from].add(_amount);\n        totalUserVotes[_from] = totalUserVotes[_from].add(_amount);\n        totalVotes = totalVotes.add(_amount);\n\n        if (votes.blockLast == 0) {\n            votes.blockLast = block.number;\n        } else {\n            _calculateAndSetConviction(votes, previousVote);\n        }\n\n        _updateVoterCastedProposals(_proposalId, _from);\n\n        emit VoteCasted(\n            _from,\n            _proposalId,\n            _amount,\n            votes.convictionLast,\n            _support\n        );\n    }\n\n    function _updateVoterCastedProposals(\n        uint256 _proposalId,\n        address _submitter\n    ) internal {\n        uint256[] storage voterCastedProposalsArray =\n            voterCastedProposals[_submitter];\n\n        if (userVotedProposalIds[_submitter][_proposalId] == 0) {\n            require(\n                voterCastedProposalsArray.length < MAX_STAKED_PROPOSALS,\n                ERROR_MAX_PROPOSALS_REACHED\n            );\n            voterCastedProposalsArray.push(_proposalId);\n            userVotedProposalIds[_submitter][\n                _proposalId\n            ] = voterCastedProposalsArray.length;\n        }\n    }\n\n    /**\n     * @dev Withdraw an amount of tokens from a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of withdrawn tokens\n     * @param _from Account to withdraw from\n     * @param _support Positive or negative\n     */\n    function _withdrawVotesFromProposal(\n        uint256 _proposalId,\n        uint256 _amount,\n        address _from,\n        bool _support\n    ) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        Vote storage votes =\n            _support ? proposal.positiveVotes : proposal.negativeVotes;\n\n        require(\n            userVotes[votes.id][_from] >= _amount,\n            ERROR_WITHDRAW_MORE_THAN_VOTED\n        );\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n\n        quartz.moveVotesFromGovernor(_from, _amount);\n        uint256 previousVote = votes.totalVotes;\n\n        votes.totalVotes = previousVote.sub(_amount);\n        userVotes[votes.id][_from] = userVotes[votes.id][_from].sub(_amount);\n        totalUserVotes[_from] = totalUserVotes[_from].sub(_amount);\n        totalVotes = totalVotes.sub(_amount);\n\n        if (userVotes[votes.id][_from] == 0) {\n            uint256 index = userVotedProposalIds[_from][_proposalId].sub(1);\n            userVotedProposalIds[_from][_proposalId] = 0;\n            uint256 lastIndex = voterCastedProposals[_from].length.sub(1);\n            uint256 lastProposalId = voterCastedProposals[_from][lastIndex];\n            voterCastedProposals[_from][index] = lastProposalId;\n            userVotedProposalIds[_from][lastProposalId] = index.add(1);\n\n            voterCastedProposals[_from].pop();\n        }\n\n        if (proposal.proposalStatus == ProposalStatus.Active) {\n            _calculateAndSetConviction(votes, previousVote);\n        }\n\n        emit VoteWithdrawn(\n            _from,\n            _proposalId,\n            _amount,\n            votes.convictionLast,\n            _support\n        );\n    }\n\n    /**\n     * @dev Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a)\n     * Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\n     * @param _timePassed Number of blocks since last conviction record\n     * @param _lastConv Last conviction record\n     * @param _oldAmount Amount of tokens staked until now\n     * @return Current conviction\n     */\n    function calculateConviction(\n        uint256 _timePassed,\n        uint256 _lastConv,\n        uint256 _oldAmount\n    ) public view returns (uint256) {\n        uint256 t = uint256(_timePassed);\n        // atTWO_128 = 2^128 * a^t\n        uint256 atTWO_128 = _pow((decay << 128).div(D), t);\n        // solium-disable-previous-line\n        // conviction = (atTWO_128 * _lastConv + _oldAmount * D * (2^128 - atTWO_128) / (D - aD) + 2^127) / 2^128\n        return\n            (\n                atTWO_128.mul(_lastConv).add(\n                    _oldAmount.mul(D).mul(TWO_128.sub(atTWO_128)).div(D - decay)\n                )\n            )\n                .add(TWO_127) >> 128;\n    }\n\n    /**\n     * @dev Formula: ρ * totalStaked / (1 - a) / (β - minVotesToPass / total)**2\n     * For the Solidity implementation we amplify ρ and β and simplify the formula:\n     * weight = ρ * D\n     * maxRatio = β * D\n     * decay = a * D\n     * threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - minVotesToPass * D) ** 2\n     * @return _threshold Threshold a proposal's conviction should surpass in order to be able to\n     * executed it.\n     */\n    function calculateThreshold() public view returns (uint256 _threshold) {\n        uint256 funds = quartz.totalStaked();\n        require(\n            maxRatio.mul(funds) > minVotesToPass.mul(D),\n            ERROR_AMOUNT_OVER_MAX_RATIO\n        );\n        // denom = maxRatio * 2 ** 64 / D  - minVotesToPass * 2 ** 64 / funds\n        uint256 denom =\n            (maxRatio << 64).div(D).sub((minVotesToPass << 64).div(funds));\n        // _threshold = (weight * 2 ** 128 / D) / (denom ** 2 / 2 ** 64) * totalStaked * D / 2 ** 128\n        _threshold =\n            ((weight << 128).div(D).div(denom.mul(denom) >> 64))\n                .mul(D)\n                .div(D.sub(decay))\n                .mul(_totalVotes()) >>\n            64;\n    }\n\n    function _totalVotes() internal view returns (uint256) {\n        uint256 minTotalVotes =\n            (quartz.totalStaked().mul(minThresholdStakePercentage)).div(\n                ONE_HUNDRED_PERCENT\n            );\n        return totalVotes < minTotalVotes ? minTotalVotes : totalVotes;\n    }\n\n    /**\n     * @dev Withdraw required votes to move delegates\n     */\n    function withdrawRequiredVotes(\n        address _from,\n        uint256 _amount,\n        bool force\n    ) external onlyQuartz {\n        uint256 inactiveWithdrawn = _withdrawInactiveVotes(_amount, _from);\n        if (inactiveWithdrawn < _amount) {\n            require(force, ERROR_NOT_ENOUGH_INACTIVE_VOTES);\n            uint256 activeWithdrawn =\n                _withdrawActiveVotes(_amount.sub(inactiveWithdrawn), _from);\n            require(\n                inactiveWithdrawn.add(activeWithdrawn) >= _amount,\n                ERROR_NO_ENOUGH_VOTES\n            );\n        }\n    }\n\n    /**\n     * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\n     * 2^128 and parameter _b should be less than 2^128.\n     * @param _a left argument\n     * @param _b right argument\n     * @return _result _a * _b / 2^128\n     */\n    function _mul(uint256 _a, uint256 _b)\n        internal\n        pure\n        returns (uint256 _result)\n    {\n        require(_a <= TWO_128, \"_a should be less than or equal to 2^128\");\n        require(_b < TWO_128, \"_b should be less than 2^128\");\n        return _a.mul(_b).add(TWO_127) >> 128;\n    }\n\n    /**\n     * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\n     *\n     * @param _a left argument\n     * @param _b right argument\n     * @return _result (_a / 2^128)^_b * 2^128\n     */\n    function _pow(uint256 _a, uint256 _b)\n        internal\n        pure\n        returns (uint256 _result)\n    {\n        require(_a < TWO_128, \"_a should be less than 2^128\");\n        uint256 a = _a;\n        uint256 b = _b;\n        _result = TWO_128;\n        while (b > 0) {\n            if (b & 1 == 0) {\n                a = _mul(a, a);\n                b >>= 1;\n            } else {\n                _result = _mul(_result, a);\n                b -= 1;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/QuartzL1.sol": {
      "content": "pragma solidity 0.7.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract QuartzL1 is ERC20(\"Sandclock\", \"QUARTZ\") {\n    constructor() {\n        _mint(msg.sender, 100000000 * 1e18);\n    }\n}\n"
    },
    "contracts/Quartz.sol": {
      "content": "pragma solidity 0.7.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IQuartzGovernor.sol\";\nimport \"./libraries/SafeMath64.sol\";\n\ncontract Quartz is ERC20(\"Sandclock\", \"QUARTZ\"), Ownable {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    event Staked(\n        uint64 indexed id,\n        address indexed owner,\n        address indexed beneficiary,\n        uint256 amount,\n        uint64 maturationTime\n    );\n\n    event Unstaked(\n        uint64 indexed id,\n        address indexed owner,\n        address indexed beneficiary,\n        uint256 amount\n    );\n\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    struct StakeInfo {\n        address owner; // Owner who staked tokens\n        address beneficiary; // Beneficiary who received vote rep\n        uint256 amount; // Staked Quartz amount\n        uint64 period; // Stake period in seconds\n        uint64 maturationTimestamp; // Stake maturation timestamp\n        bool active; // Indicates active after maturation time\n    }\n\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    IQuartzGovernor public governor;\n\n    mapping(address => uint256) public userVotesRep;\n    mapping(address => address) public delegates;\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n    mapping(address => uint32) public numCheckpoints;\n    uint64 public stakeLength;\n    // All stakes infos\n    mapping(uint64 => StakeInfo) public stakes;\n    // Total staked amount\n    uint256 public totalStaked;\n\n    constructor() {\n        _mint(msg.sender, 100000000 * 1e18);\n    }\n\n    function setGovernor(IQuartzGovernor _governor) external onlyOwner {\n        require(\n            address(_governor) != address(0),\n            \"QUARTZ: Governor cannot be zero\"\n        );\n        governor = _governor;\n    }\n\n    // Stake QUARTZ token to grant vote rep to beneficiary for a period.\n    function stake(\n        uint256 _amount,\n        address _beneficiary,\n        uint64 _period\n    ) external {\n        require(\n            _beneficiary != address(0),\n            \"QUARTZ: Beneficiary cannot be 0x0\"\n        );\n        require(_amount > 0, \"QUARTZ: Amount must be greater than zero\");\n\n        _transfer(msg.sender, address(this), _amount);\n\n        address _owner = msg.sender;\n        uint64 _stakeId = stakeLength;\n        uint64 _maturationTimestamp = _getBlockTimestamp().add(_period);\n        StakeInfo memory stakeInfo =\n            StakeInfo({\n                owner: _owner,\n                beneficiary: _beneficiary,\n                amount: _amount,\n                period: _period,\n                maturationTimestamp: _maturationTimestamp,\n                active: true\n            });\n        stakes[_stakeId] = stakeInfo;\n\n        userVotesRep[_beneficiary] = userVotesRep[_beneficiary].add(_amount);\n        if (delegates[_beneficiary] == address(0)) {\n            _delegate(_beneficiary, _beneficiary);\n        } else {\n            _moveDelegates(address(0), delegates[_beneficiary], _amount);\n        }\n\n        stakeLength = stakeLength.add(1);\n        totalStaked = totalStaked.add(_amount);\n        emit Staked(\n            _stakeId,\n            _owner,\n            _beneficiary,\n            _amount,\n            _maturationTimestamp\n        );\n    }\n\n    function unstake(uint64 _stakeId) external {\n        require(_stakeId < stakeLength, \"QUARTZ: Invalid id\");\n        StakeInfo storage stakeInfo = stakes[_stakeId];\n        require(\n            stakeInfo.maturationTimestamp <= _getBlockTimestamp(),\n            \"QUARTZ: Not ready to unstake\"\n        );\n        require(stakeInfo.active, \"QUARTZ: Already unstaked\");\n        require(stakeInfo.owner == msg.sender, \"QUARTZ: Not owner\");\n        _transfer(address(this), msg.sender, stakeInfo.amount);\n\n        stakeInfo.active = false;\n        userVotesRep[stakeInfo.beneficiary] = userVotesRep[\n            stakeInfo.beneficiary\n        ]\n            .sub(stakeInfo.amount);\n\n        _moveDelegates(\n            delegates[stakeInfo.beneficiary],\n            address(0),\n            stakeInfo.amount\n        );\n\n        totalStaked = totalStaked.sub(stakeInfo.amount);\n\n        emit Unstaked(\n            _stakeId,\n            stakeInfo.owner,\n            stakeInfo.beneficiary,\n            stakeInfo.amount\n        );\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    function moveVotesToGovernor(address user, uint256 amount) external {\n        require(\n            msg.sender == address(governor),\n            \"QUARTZ: only governor can call\"\n        );\n        _moveDelegates(user, msg.sender, amount);\n    }\n\n    function moveVotesFromGovernor(address user, uint256 amount) external {\n        require(\n            msg.sender == address(governor),\n            \"QUARTZ: only governor can call\"\n        );\n        _moveDelegates(msg.sender, user, amount);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) public view returns (uint256) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        require(delegatee != address(0), \"QUARTZ: delegatee cannot be 0x0\");\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorVotesRep = userVotesRep[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorVotesRep);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld =\n                    srcRepNum > 0\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\n                        : 0;\n                if (srcRepOld < amount) {\n                    governor.withdrawRequiredVotes(\n                        srcRep,\n                        amount.sub(srcRepOld),\n                        dstRep == address(0)\n                    );\n                    srcRepNum = numCheckpoints[srcRep];\n                    srcRepOld = srcRepNum > 0\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\n                        : 0;\n                }\n                uint256 srcRepNew =\n                    srcRepOld.sub(\n                        amount,\n                        \"Quartz::_moveVotes: vote amount underflows\"\n                    );\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld =\n                    dstRepNum > 0\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\n                        : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        uint32 blockNumber =\n            safe32(\n                block.number,\n                \"Quartz::_writeCheckpoint: block number exceeds 32 bits\"\n            );\n\n        if (\n            nCheckpoints > 0 &&\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n        ) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n                blockNumber,\n                newVotes\n            );\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function _getBlockTimestamp() private view returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/IQuartzGovernor.sol": {
      "content": "pragma solidity 0.7.3;\n\ninterface IQuartzGovernor {\n    function withdrawRequiredVotes(\n        address from,\n        uint256 amount,\n        bool force\n    ) external;\n\n    function getTotalUserVotes(address _voter) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/SafeMath64.sol": {
      "content": "pragma solidity 0.7.3;\n\nlibrary SafeMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\n        uint64 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint64 a,\n        uint64 b,\n        string memory errorMessage\n    ) internal pure returns (uint64) {\n        require(b <= a, errorMessage);\n        uint64 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint64 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint64 a,\n        uint64 b,\n        string memory errorMessage\n    ) internal pure returns (uint64) {\n        require(b > 0, errorMessage);\n        uint64 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint64 a,\n        uint64 b,\n        string memory errorMessage\n    ) internal pure returns (uint64) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}